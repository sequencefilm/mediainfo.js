{"version":3,"file":"index.min.js","sources":["../../src/error.ts","../../src/MediaInfoResult.ts","../../src/MediaInfo.ts","../../src/mediaInfoFactory.ts","../../src/typeGuard.ts"],"sourcesContent":["function isError(error: unknown): error is Error {\n  return (\n    error !== null &&\n    typeof error === 'object' &&\n    Object.prototype.hasOwnProperty.call(error, 'message')\n  )\n}\n\nfunction unknownToError(error: unknown): Error {\n  if (isError(error)) {\n    return error\n  }\n  return new Error(typeof error === 'string' ? error : 'Unknown error')\n}\n\nexport { unknownToError }\n","// DO NOT EDIT! File generated using `generate-types` script.\n\nexport const INT_FIELDS = [\n  'Active_Height',\n  'Active_Width',\n  'AudioCount',\n  'Audio_Channels_Total',\n  'BitDepth_Detected',\n  'BitDepth',\n  'BitDepth_Stored',\n  'Channels',\n  'Channels_Original',\n  'Chapters_Pos_Begin',\n  'Chapters_Pos_End',\n  'Comic_Position_Total',\n  'Count',\n  'DataSize',\n  'ElementCount',\n  'EPG_Positions_Begin',\n  'EPG_Positions_End',\n  'FirstPacketOrder',\n  'FooterSize',\n  'Format_Settings_GMC',\n  'Format_Settings_RefFrames',\n  'Format_Settings_SliceCount',\n  'FrameCount',\n  'FrameRate_Den',\n  'FrameRate_Num',\n  'GeneralCount',\n  'HeaderSize',\n  'Height_CleanAperture',\n  'Height',\n  'Height_Offset',\n  'Height_Original',\n  'ImageCount',\n  'Lines_MaxCharacterCount',\n  'Lines_MaxCountPerEvent',\n  'Matrix_Channels',\n  'MenuCount',\n  'OtherCount',\n  'Part_Position',\n  'Part_Position_Total',\n  'Played_Count',\n  'Reel_Position',\n  'Reel_Position_Total',\n  'Resolution',\n  'Sampled_Height',\n  'Sampled_Width',\n  'SamplingCount',\n  'Season_Position',\n  'Season_Position_Total',\n  'Source_FrameCount',\n  'Source_SamplingCount',\n  'Source_StreamSize_Encoded',\n  'Source_StreamSize',\n  'Status',\n  'Stored_Height',\n  'Stored_Width',\n  'StreamCount',\n  'StreamKindID',\n  'StreamKindPos',\n  'StreamSize_Demuxed',\n  'StreamSize_Encoded',\n  'StreamSize',\n  'TextCount',\n  'Track_Position',\n  'Track_Position_Total',\n  'Video0_Delay',\n  'VideoCount',\n  'Width_CleanAperture',\n  'Width',\n  'Width_Offset',\n  'Width_Original',\n] as const\n\nexport const FLOAT_FIELDS = [\n  'Active_DisplayAspectRatio',\n  'BitRate_Encoded',\n  'BitRate_Maximum',\n  'BitRate_Minimum',\n  'BitRate',\n  'BitRate_Nominal',\n  'Bits-Pixel_Frame',\n  'BitsPixel_Frame',\n  'Compression_Ratio',\n  'Delay',\n  'Delay_Original',\n  'DisplayAspectRatio_CleanAperture',\n  'DisplayAspectRatio',\n  'DisplayAspectRatio_Original',\n  'Duration_End_Command',\n  'Duration_End',\n  'Duration_FirstFrame',\n  'Duration_LastFrame',\n  'Duration',\n  'Duration_Start2End',\n  'Duration_Start_Command',\n  'Duration_Start',\n  'Events_MinDuration',\n  'FrameRate_Maximum',\n  'FrameRate_Minimum',\n  'FrameRate',\n  'FrameRate_Nominal',\n  'FrameRate_Original_Den',\n  'FrameRate_Original',\n  'FrameRate_Original_Num',\n  'FrameRate_Real',\n  'Interleave_Duration',\n  'Interleave_Preload',\n  'Interleave_VideoFrames',\n  'OverallBitRate_Maximum',\n  'OverallBitRate_Minimum',\n  'OverallBitRate',\n  'OverallBitRate_Nominal',\n  'PixelAspectRatio_CleanAperture',\n  'PixelAspectRatio',\n  'PixelAspectRatio_Original',\n  'SamplesPerFrame',\n  'SamplingRate',\n  'Source_Duration_FirstFrame',\n  'Source_Duration_LastFrame',\n  'Source_Duration',\n  'TimeStamp_FirstFrame',\n  'Video_Delay',\n] as const\n\nexport interface CreationInfo {\n  readonly version: string\n  readonly url?: string\n  readonly build_date?: string\n  readonly build_time?: string\n  readonly compiler_ident?: string\n}\n\nexport type Extra = Record<string, unknown>\n\nexport interface BaseTrack {\n  /** Documents the type of encoded media with the track, ie: General, Video, Audio, Text, Image, etc. */\n  readonly '@type': 'General' | 'Video' | 'Audio' | 'Text' | 'Image' | 'Menu' | 'Other'\n  /** If there is more than one track of the same type (i.e. four audio tracks) this attribute will number them according to storage order within the bitstream. */\n  readonly '@typeorder'?: string\n  /** Holds (untyped) extra information if available */\n  readonly extra?: Extra\n  /** Count of objects available in this stream created by MediaInfo when analyzing file. @internal */\n  readonly Count?: number\n  /** Status of bit field when parsing. Options are: 0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished. @internal */\n  readonly Status?: number\n  /** Total number of streams available for this StreamKind. Counting starts at 1 */\n  readonly StreamCount?: number\n  /** Name of stream type. Options are: Audio, General, Image, Menu, Other, Text, or Video */\n  readonly StreamKind?: string\n  /** Name of stream type. Options are: Audio, General, Image, Menu, Other, Text, or Video */\n  readonly StreamKind_String?: string\n  /** Identification number for stream, assigned in order of parsing. Counting starts at 0 */\n  readonly StreamKindID?: number\n  /** Identification number for stream when multiple, assigned in order of parsing. Counting starts at 1 */\n  readonly StreamKindPos?: number\n  /** Stream order in the file for type of stream. Counting starts at 0 */\n  readonly StreamOrder?: string\n  /** Order of the first fully decodable packet parsed in the file for stream type. Counting starts at 0 */\n  readonly FirstPacketOrder?: number\n  /** Last **Inform** call. @internal */\n  readonly Inform?: string\n  /** The identification number for this stream in this file */\n  readonly ID?: string\n  /** The identification number for this stream in this file (String format) */\n  readonly ID_String?: string\n  /** Identification for this stream in the original medium of the material, taken from Tag metadata */\n  readonly OriginalSourceMedium_ID?: string\n  /** Identification for this stream in the original medium of the material, taken from Tag metadata (String format) */\n  readonly OriginalSourceMedium_ID_String?: string\n  /** The unique ID for this stream, should be copied with stream copy */\n  readonly UniqueID?: string\n  /** The unique ID for this stream, should be copied with stream copy */\n  readonly UniqueID_String?: string\n  /** The menu ID for this stream in this file */\n  readonly MenuID?: string\n  /** The menu ID for this stream in this file */\n  readonly MenuID_String?: string\n  /** Format used */\n  readonly Format?: string\n  /** Format used + additional features */\n  readonly Format_String?: string\n  /** More details about the identified Format */\n  readonly Format_Info?: string\n  /** Link to a description of this format */\n  readonly Format_Url?: string\n  /** Commercial name used by vendor for these settings or Format field if there is no difference */\n  readonly Format_Commercial?: string\n  /** Commercial name used by vendor for these settings if there is one */\n  readonly Format_Commercial_IfAny?: string\n  /** Version for the identified format */\n  readonly Format_Version?: string\n  /** Profile of the Format */\n  readonly Format_Profile?: string\n  /** Compression method used */\n  readonly Format_Compression?: string\n  /** Settings used and required by decoder */\n  readonly Format_Settings?: string\n  /** Features required to fully support the file content */\n  readonly Format_AdditionalFeatures?: string\n  /** Codec ID, if defined by the container */\n  readonly CodecID?: string\n  /** Codec ID, if defined by the container (String format) */\n  readonly CodecID_String?: string\n  /** More information about this codec */\n  readonly CodecID_Info?: string\n  /** Common alternative names for this codec */\n  readonly CodecID_Hint?: string\n  /** A link to more details about this codec */\n  readonly CodecID_Url?: string\n  /** Codec description, as defined by the container */\n  readonly CodecID_Description?: string\n}\n\nexport interface AudioTrack extends BaseTrack {\n  readonly '@type': 'Audio'\n  /** Level of the Format */\n  readonly Format_Level?: string\n  /** Whether Spectral band replication settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_SBR?: string\n  /** Whether Spectral band replication settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_SBR_String?: string\n  /** Whether Parametric Stereo settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_PS?: string\n  /** Whether Parametric Stereo settings used in encoding. Options are Yes (NBC)/No (Explicit). Note: NBC stands for \"Not Backwards Compatable\" */\n  readonly Format_Settings_PS_String?: string\n  /** Profile for format settings used in encoding (e.g. Joint Stereo) */\n  readonly Format_Settings_Mode?: string\n  /** Extended format settings profile for Joint Stereo, derived from header data (e.g. Intensity Stereo + MS Stereo) */\n  readonly Format_Settings_ModeExtension?: string\n  /** Emphasis format settings for MPEG audio, derived from header data (e.g. 50/15ms) */\n  readonly Format_Settings_Emphasis?: string\n  /** Settings for Vorbis spectral \"floor\" (a low-resolution representation of the audio spectrum for the given channel in the current frame) vector (e.g. Floor0) */\n  readonly Format_Settings_Floor?: string\n  /** Agency or company responsible for format settings used in encoding (e.g. Microsoft) */\n  readonly Format_Settings_Firm?: string\n  /** Order of bytes required for decoding. Options are Big/Little */\n  readonly Format_Settings_Endianness?: string\n  /** How numbers are stored in stream's encoding. Options are Signed/Unsigned */\n  readonly Format_Settings_Sign?: string\n  /** U-law or A-law */\n  readonly Format_Settings_Law?: string\n  /** ITU Telecommunication Standardization Sector compression standard used in encoding (e.g. G.726) */\n  readonly Format_Settings_ITU?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Matrix format used in encoding (e.g. DTS Neural Audio) */\n  readonly Matrix_Format?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** More information about MuxingMode */\n  readonly MuxingMode_MoreInfo?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Duration of the first frame (if different than other frames), in ms */\n  readonly Duration_FirstFrame?: number\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_FirstFrame_String?: string\n  /** Duration of the first frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_FirstFrame_String1?: string\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_FirstFrame_String2?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_FirstFrame_String3?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_FirstFrame_String4?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_FirstFrame_String5?: string\n  /** Duration of the last frame (if different than other frames), in ms */\n  readonly Duration_LastFrame?: number\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_LastFrame_String?: string\n  /** Duration of the last frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_LastFrame_String1?: string\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_LastFrame_String2?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_LastFrame_String3?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_LastFrame_String4?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_LastFrame_String5?: string\n  /** Duration of content stored in the file, in ms */\n  readonly Source_Duration?: number\n  /** Duration of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_String?: string\n  /** Duration of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_String1?: string\n  /** Duration of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_String2?: string\n  /** Duration of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_String3?: string\n  /** Duration of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Duration of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode of this stream (CBR, VBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode of this stream, as word (Variable, Constant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate of this stream, in bps */\n  readonly BitRate?: number\n  /** Bit rate of this stream, with measurement (e.g. 128 kb/s) */\n  readonly BitRate_String?: string\n  /** Minimum bit rate of this stream, in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum bit rate of this stream, with measurement */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal bit rate of this stream, in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal bit rate of this stream, with measurement */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum bit rate of this stream, in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum bit rate of this stream, with measurement */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded?: number\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded_String?: string\n  /** Number of channels (e.g. 2) */\n  readonly Channels?: number\n  /** Number of channels (with measurement) */\n  readonly Channels_String?: string\n  /** Number of channels (e.g. 6) */\n  readonly Channels_Original?: number\n  /** Number of channels, with measurement (e.g. 6 channels) */\n  readonly Channels_Original_String?: string\n  /** Number of channels after matrix decoding */\n  readonly Matrix_Channels?: number\n  /** Number of channels after matrix decoding, with measurement */\n  readonly Matrix_Channels_String?: string\n  /** Position of channels (e.g. Front: L C R, Side: L R, Back: L R, LFE) */\n  readonly ChannelPositions?: string\n  /** Position of channels (e.g. Front: L C R, Side: L R, Back: L R, LFE) */\n  readonly ChannelPositions_Original?: string\n  /** Position of channels in x/y.z format (e.g. 3/2/0.1) */\n  readonly ChannelPositions_String2?: string\n  /** Position of channels in x/y.z format (e.g. 3/2/0.1) */\n  readonly ChannelPositions_Original_String2?: string\n  /** Position of channels after matrix decoding */\n  readonly Matrix_ChannelPositions?: string\n  /** Position of channels after matrix decoding in x/y.z format */\n  readonly Matrix_ChannelPositions_String2?: string\n  /** Layout of channels (e.g. L R C LFE Ls Rs Lb Rb) */\n  readonly ChannelLayout?: string\n  /** Layout of channels (e.g. L R C LFE Ls Rs Lb Rb) */\n  readonly ChannelLayout_Original?: string\n  /** ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon */\n  readonly ChannelLayoutID?: string\n  /** Samples per frame (e.g. 1536) */\n  readonly SamplesPerFrame?: number\n  /** Sampling rate, in Hertz (e.g. 48000) */\n  readonly SamplingRate?: number\n  /** Sampling rate, in Hertz, with measurement (e.g. 48.0 KHz) */\n  readonly SamplingRate_String?: string\n  /** Sample count (based on sampling rate) */\n  readonly SamplingCount?: number\n  /** Source Sample count (based on sampling rate), with information derived from header metadata */\n  readonly Source_SamplingCount?: number\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Frame count */\n  readonly FrameCount?: number\n  /** Source frame count */\n  readonly Source_FrameCount?: number\n  /** Number of bits in each sample (resolution) of stream (e.g. 16). This field will show the significant bits if the stored bit depth is different */\n  readonly BitDepth?: number\n  /** Number of bits in each sample (resolution) of stream (e.g. 16). This field will show the significant bits if the stored bit depth is different */\n  readonly BitDepth_String?: string\n  /** Number of bits in each sample (resolution), as detected during scan of the input by the muxer, in bits (e.g. 24) */\n  readonly BitDepth_Detected?: number\n  /** Number of bits in each sample (resolution), as detected during scan of the input by the muxer, in bits (e.g. 24) */\n  readonly BitDepth_Detected_String?: string\n  /** Stored number of bits in each sample (resolution), in bits (e.g. 24) */\n  readonly BitDepth_Stored?: number\n  /** Stored number of bits in each sample (resolution), in bits (e.g. 24) */\n  readonly BitDepth_Stored_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings, (e.g. in case of timecode) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_DropFrame?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source_String?: string\n  /** Delay, in ms */\n  readonly Delay_Original?: number\n  /** Delay, with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay, in format HH:MM:SS.mmm */\n  readonly Delay_Original_String3?: string\n  /** Delay, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (e.g. Container, Stream, empty) */\n  readonly Delay_Original_Source?: string\n  /** Delay fixed in the stream relative to video, in ms (e.g. -80) */\n  readonly Video_Delay?: number\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String1?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String2?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (e.g. -00:00:00.080) */\n  readonly Video_Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with the last colon replaced by semicolon for drop frame if available */\n  readonly Video_Delay_String4?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Video_Delay_String5?: string\n  /** Time code for first frame in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code for last frame (excluding the duration of the last frame) in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_LastFrame?: string\n  /** Time code drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Additional time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC, etc.) */\n  readonly TimeCode_Source?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly ReplayGain_Gain?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly ReplayGain_Gain_String?: string\n  /** The maximum absolute peak value of the item */\n  readonly ReplayGain_Peak?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Size of content stored in the file, in bytes */\n  readonly Source_StreamSize?: number\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_String1?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_String2?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_String3?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_String4?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Size of this stream when encoded, in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String1?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String2?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Encoded_String3?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Encoded_String4?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Size of content stored in the file when encoded, in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String1?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String2?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_Encoded_String3?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment_String?: string\n  /** For interleaved video, between how many video frames this stream is inserted (e.g. 0.51 video frame) */\n  readonly Interleave_VideoFrames?: number\n  /** For interleaved video, between how much time, in ms, this stream is inserted (e.g. 21 ms) */\n  readonly Interleave_Duration?: number\n  /** For interleaved video, between how many video frames this stream is inserted, as duration with measurement and amount of frame (s) in parenthesis (e.g. 21 ms (0.51 video frame)) */\n  readonly Interleave_Duration_String?: string\n  /** How much time is buffered before the first video frame, in ms (e.g. 500) */\n  readonly Interleave_Preload?: number\n  /** How much time is buffered before the first video frame, in ms with measurement (e.g. 500 ms) */\n  readonly Interleave_Preload_String?: string\n  /** Title of track */\n  readonly Title?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** Name of the software package used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Time that the encoding of this item was completed, in UTC @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time that the tags were added to this item, in UTC @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n}\n\nexport interface GeneralTrack extends BaseTrack {\n  readonly '@type': 'General'\n  /** Total number of General streams in this file */\n  readonly GeneralCount?: number\n  /** Total number of Video streams in this file */\n  readonly VideoCount?: number\n  /** Total number of Audio streams in this file */\n  readonly AudioCount?: number\n  /** Total number of Text streams in this file */\n  readonly TextCount?: number\n  /** Total number of Other streams in this file */\n  readonly OtherCount?: number\n  /** Total number of Image streams in this file */\n  readonly ImageCount?: number\n  /** Total number of Menu streams in this file */\n  readonly MenuCount?: number\n  /** Video codecs found in this file, separated by forward slash (\"/\") */\n  readonly Video_Format_List?: string\n  /** Video codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Video_Format_WithHint_List?: string\n  /** List of video stream languages in this file separated by forward slash (\"/\") */\n  readonly Video_Language_List?: string\n  /** Audio codecs found in this file, separated by forward slash (\"/\") */\n  readonly Audio_Format_List?: string\n  /** Audio codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Audio_Format_WithHint_List?: string\n  /** List of audio stream languages in this file separated by forward slash (\"/\") */\n  readonly Audio_Language_List?: string\n  /** Total count of channels in all audio streams */\n  readonly Audio_Channels_Total?: number\n  /** Text codecs found in this file, separated by forward slash (\"/\") */\n  readonly Text_Format_List?: string\n  /** Text codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Text_Format_WithHint_List?: string\n  /** List of text stream languages in this file separated by forward slash (\"/\") */\n  readonly Text_Language_List?: string\n  /** Other data formats found in this file, separated by forward slash (\"/\") */\n  readonly Other_Format_List?: string\n  /** Other data formats found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Other_Format_WithHint_List?: string\n  /** List of other stream languages (typically Chapters) in this file separated by forward slash (\"/\") */\n  readonly Other_Language_List?: string\n  /** Image codecs found in this file, separated by forward slash (\"/\") */\n  readonly Image_Format_List?: string\n  /** Image codecs found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Image_Format_WithHint_List?: string\n  /** List of image stream languages in this file separated by forward slash (\"/\") */\n  readonly Image_Language_List?: string\n  /** Menu formats found in this file, separated by forward slash (\"/\") */\n  readonly Menu_Format_List?: string\n  /** Menu formats found in this file, separated by forward slash (\"/\") and including common alternative codec names */\n  readonly Menu_Format_WithHint_List?: string\n  /** List of menu stream languages in this file separated by forward slash (\"/\") */\n  readonly Menu_Language_List?: string\n  /** Full path for this file (Folder+Name+Extension) */\n  readonly CompleteName?: string\n  /** Folder name for this file */\n  readonly FolderName?: string\n  /** File name and extension */\n  readonly FileNameExtension?: string\n  /** File name only */\n  readonly FileName?: string\n  /** File extension only */\n  readonly FileExtension?: string\n  /** Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) */\n  readonly CompleteName_Last?: string\n  /** Folder name only of the last file (in the case of a sequence of files) */\n  readonly FolderName_Last?: string\n  /** File name and extension of the last file (in the case of a sequence of files) */\n  readonly FileNameExtension_Last?: string\n  /** File name only of the last file (in the case of a sequence of files) */\n  readonly FileName_Last?: string\n  /** File extension only of the last file (in the case of a sequence of files) */\n  readonly FileExtension_Last?: string\n  /** Known extensions for the identified format */\n  readonly Format_Extensions?: string\n  /** Level of the Format */\n  readonly Format_Level?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** Version of the CodecID */\n  readonly CodecID_Version?: string\n  /** List of codecs that are compatible with the identified container */\n  readonly CodecID_Compatible?: string\n  /** If Audio and video are muxed */\n  readonly Interleaved?: string\n  /** File size, in bytes */\n  readonly FileSize?: string\n  /** File size with measurement (measured in powers of 1024) */\n  readonly FileSize_String?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the nearest integer */\n  readonly FileSize_String1?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the two most significant digits */\n  readonly FileSize_String2?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the three most significant digits */\n  readonly FileSize_String3?: string\n  /** File size with measurement (measured in powers of 1024) rounded to the four most significant digits */\n  readonly FileSize_String4?: string\n  /** Play time of the content, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Start time of stream, in UTC */\n  readonly Duration_Start?: number\n  readonly Duration_Start_String?: string\n  readonly Duration_Start_String1?: string\n  readonly Duration_Start_String2?: string\n  readonly Duration_Start_String3?: string\n  readonly Duration_Start_String4?: string\n  readonly Duration_Start_String5?: string\n  /** End time of stream, in UTC */\n  readonly Duration_End?: number\n  readonly Duration_End_String?: string\n  readonly Duration_End_String1?: string\n  readonly Duration_End_String2?: string\n  readonly Duration_End_String3?: string\n  readonly Duration_End_String4?: string\n  readonly Duration_End_String5?: string\n  /** Bit rate mode of all streams (CBR, VBR) */\n  readonly OverallBitRate_Mode?: string\n  /** Bit rate mode of all streams, as word (Variable, Constant) */\n  readonly OverallBitRate_Mode_String?: string\n  /** Bit rate of all streams, in bps */\n  readonly OverallBitRate?: number\n  /** Bit rate of all streams, with measurement (e.g. 14.2 kb/s) */\n  readonly OverallBitRate_String?: string\n  /** Minimum total bit rate of all streams, in bps */\n  readonly OverallBitRate_Minimum?: number\n  /** Minimum bit rate of all streams, with measurement */\n  readonly OverallBitRate_Minimum_String?: string\n  /** Nominal bit rate of all streams, in bps */\n  readonly OverallBitRate_Nominal?: number\n  /** Nominal bit rate of all streams, with measurement */\n  readonly OverallBitRate_Nominal_String?: string\n  /** Maximum bit rate of all streams, in bps */\n  readonly OverallBitRate_Maximum?: number\n  /** Maximum bit rate of all streams, with measurement */\n  readonly OverallBitRate_Maximum_String?: string\n  /** Frames per second */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement */\n  readonly FrameRate_String?: string\n  /** Frames per second, numerator */\n  readonly FrameRate_Num?: number\n  /** Frames per second, denominator */\n  readonly FrameRate_Den?: number\n  /** Frame count, if a stream has the same frame rate everywhere */\n  readonly FrameCount?: number\n  /** Delay fixed in the stream (relative), is s (ms for text output) */\n  readonly Delay?: number\n  /** Delay with measurement and rounded to integer (e.g. 213 ms) */\n  readonly Delay_String?: string\n  /** Delay with measurement and rounded to integer (e.g. 213 ms) */\n  readonly Delay_String1?: string\n  /** Delay with measurement and rounded to integer (e.g. 213 ms) */\n  readonly Delay_String2?: string\n  /** Delay in format HH:MM:SS.mmm */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with the last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (in case of timecode, for example) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame */\n  readonly Delay_DropFrame?: string\n  /** Delay source (Container, Stream, or empty) */\n  readonly Delay_Source?: string\n  /** Delay source (Container, Stream, or empty) */\n  readonly Delay_Source_String?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Header field size, in bytes */\n  readonly HeaderSize?: number\n  /** Data field size, in bytes */\n  readonly DataSize?: number\n  /** Footer field size, in bytes */\n  readonly FooterSize?: number\n  /** Set if this file is streamable or not (Yes, No) */\n  readonly IsStreamable?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly Album_ReplayGain_Gain?: string\n  /** The gain to apply to reach 89dB SPL on playback */\n  readonly Album_ReplayGain_Gain_String?: string\n  /** The maximum absolute peak value of the item */\n  readonly Album_ReplayGain_Peak?: string\n  /** Encryption */\n  readonly Encryption?: string\n  /** Encryption format */\n  readonly Encryption_Format?: string\n  /** Encryption length (128, 192 or 256 bits) */\n  readonly Encryption_Length?: string\n  /** Encryption method */\n  readonly Encryption_Method?: string\n  /** Encryption mode */\n  readonly Encryption_Mode?: string\n  /** Encryption padding */\n  readonly Encryption_Padding?: string\n  /** Encryption initialization vector */\n  readonly Encryption_InitializationVector?: string\n  /** Universal Ad-ID, see https://ad-id.org for more information */\n  readonly UniversalAdID_String?: string\n  /** Universal Ad-ID registry */\n  readonly UniversalAdID_Registry?: string\n  /** Universal Ad-ID value */\n  readonly UniversalAdID_Value?: string\n  /** Title of file @group Title */\n  readonly Title?: string\n  /** More title information @group Title */\n  readonly Title_More?: string\n  /** URL @group Title */\n  readonly Title_Url?: string\n  /** Universe that the file's contents belong to (e.g. Star Wars, Stargate, Buffy, Dragonball) @group Title */\n  readonly Domain?: string\n  /** Name of the series (e.g. Star Wars movies, Stargate SG-1, Angel) @group Title */\n  readonly Collection?: string\n  /** Name of the season (e.g. first Star Wars Trilogy, Season 1) @group Title */\n  readonly Season?: string\n  /** Number of the Season @group Title */\n  readonly Season_Position?: number\n  /** Total number of seasons @group Title */\n  readonly Season_Position_Total?: number\n  /** Name of the movie (e.g. Star Wars: A New Hope) @group Title */\n  readonly Movie?: string\n  /** More information about the Movie @group Title */\n  readonly Movie_More?: string\n  /** Homepage for the movie @group Title */\n  readonly Movie_Url?: string\n  /** Name of the album (e.g. The Joshua Tree) @group Title */\n  readonly Album?: string\n  /** More information about the Album @group Title */\n  readonly Album_More?: string\n  /** Alternate name of the album, optimized for sorting purposes (e.g. Joshua Tree, The) @group Title */\n  readonly Album_Sort?: string\n  /** Album performer/artist of this file @group Entity */\n  readonly Album_Performer?: string\n  /** Alternate name for the performer, optimized for sorting purposes (e.g. Beatles, The) @group Entity */\n  readonly Album_Performer_Sort?: string\n  /** Homepage of the album performer/artist @group Entity */\n  readonly Album_Performer_Url?: string\n  /** Name of the comic book series @group Title */\n  readonly Comic?: string\n  /** More information about the comic book series @group Title */\n  readonly Comic_More?: string\n  /** Total number of comics @group Title */\n  readonly Comic_Position_Total?: number\n  /** Name of the part (e.g. CD1, CD2) @group Title */\n  readonly Part?: string\n  /** Number of the part @group Title */\n  readonly Part_Position?: number\n  /** Total number of parts @group Title */\n  readonly Part_Position_Total?: number\n  /** Name of the reel @group Title */\n  readonly Reel?: string\n  /** Number of the reel @group Title */\n  readonly Reel_Position?: number\n  /** Total number of reel @group Title */\n  readonly Reel_Position_Total?: number\n  /** Name of the track (e.g. track 1, track 2) @group Title */\n  readonly Track?: string\n  /** More information about the Track @group Title */\n  readonly Track_More?: string\n  /** Link to a site about this Track @group Title */\n  readonly Track_Url?: string\n  /** Alternate name for the track, optimized for sorting purposes @group Title */\n  readonly Track_Sort?: string\n  /** Number of this Track @group Title */\n  readonly Track_Position?: number\n  /** Total number of tracks @group Title */\n  readonly Track_Position_Total?: number\n  /** MXF package name */\n  readonly PackageName?: string\n  /** iTunes grouping @group Title */\n  readonly Grouping?: string\n  /** Name of the Chapter @group Title */\n  readonly Chapter?: string\n  /** Name of the Subtrack @group Title */\n  readonly SubTrack?: string\n  /** Original name of the Album @group Title */\n  readonly Original_Album?: string\n  /** Original name of the Movie @group Title */\n  readonly Original_Movie?: string\n  /** Original name of the Part @group Title */\n  readonly Original_Part?: string\n  /** Original name of the Track @group Title */\n  readonly Original_Track?: string\n  /** iTunes compilation @group Title */\n  readonly Compilation?: string\n  /** iTunes compilation @group Title */\n  readonly Compilation_String?: string\n  /** Main performer(s)/artist(s) @group Entity */\n  readonly Performer?: string\n  /** Alternate name for the performer, optimized for sorting purposes (e.g. Beatles, The) @group Entity */\n  readonly Performer_Sort?: string\n  /** Homepage of the performer/artist @group Entity */\n  readonly Performer_Url?: string\n  /** Original artist(s)/performer(s) @group Entity */\n  readonly Original_Performer?: string\n  /** Band/orchestra/accompaniment/musician @group Entity */\n  readonly Accompaniment?: string\n  /** Name of the original composer @group Entity */\n  readonly Composer?: string\n  /** Nationality of the primary composer of the piece @group Entity */\n  readonly Composer_Nationality?: string\n  /** Nationality of the primary composer of the piece (e.g. Mozart, Wolfgang Amadeus) @group Entity */\n  readonly Composer_Sort?: string\n  /** The person who arranged the piece (e.g. Ravel) @group Entity */\n  readonly Arranger?: string\n  /** The person who wrote the lyrics for the piece @group Entity */\n  readonly Lyricist?: string\n  /** Original lyricist(s)/text writer(s) @group Entity */\n  readonly Original_Lyricist?: string\n  /** The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists, etc @group Entity */\n  readonly Conductor?: string\n  /** Name of the director @group Entity */\n  readonly Director?: string\n  /** Name of the codirector @group Entity */\n  readonly CoDirector?: string\n  /** Name of the assistant director @group Entity */\n  readonly AssistantDirector?: string\n  /** Name of the director of photography, also known as cinematographer @group Entity */\n  readonly DirectorOfPhotography?: string\n  /** Name of the sound engineer or sound recordist @group Entity */\n  readonly SoundEngineer?: string\n  /** Name of the person who oversees the artists and craftspeople who build the sets @group Entity */\n  readonly ArtDirector?: string\n  /** Name of the person responsible for designing the overall visual appearance of a movie @group Entity */\n  readonly ProductionDesigner?: string\n  /** Name of the choreographer @group Entity */\n  readonly Choreographer?: string\n  /** Name of the costume designer @group Entity */\n  readonly CostumeDesigner?: string\n  /** Real name of an actor/actress playing a role in the movie @group Entity */\n  readonly Actor?: string\n  /** Name of the character an actor or actress plays in this movie @group Entity */\n  readonly Actor_Character?: string\n  /** Author of the story or script @group Entity */\n  readonly WrittenBy?: string\n  /** Author of the screenplay or scenario (used for movies and TV shows) @group Entity */\n  readonly ScreenplayBy?: string\n  /** Editors name @group Entity */\n  readonly EditedBy?: string\n  /** Name of the person or organization that commissioned the subject of the file @group Entity */\n  readonly CommissionedBy?: string\n  /** Name of the producer of the media @group Entity */\n  readonly Producer?: string\n  /** Name of a co-producer of the media @group Entity */\n  readonly CoProducer?: string\n  /** Name of an executive producer of the media @group Entity */\n  readonly ExecutiveProducer?: string\n  /** Main musical artist for the media @group Entity */\n  readonly MusicBy?: string\n  /** Company responsible for distribution of the content @group Entity */\n  readonly DistributedBy?: string\n  /** Name of the person or organization who supplied the original subject @group Entity */\n  readonly OriginalSourceForm_DistributedBy?: string\n  /** The engineer who mastered the content for a physical medium or for digital distribution @group Entity */\n  readonly MasteredBy?: string\n  /** Name of the person/organisation that encoded/ripped the audio file @group Entity */\n  readonly EncodedBy?: string\n  /** Name of the artist(s) that interpreted, remixed, or otherwise modified the content @group Entity */\n  readonly RemixedBy?: string\n  /** Main production studio of the media @group Entity */\n  readonly ProductionStudio?: string\n  /** A very general metadata tag for everyone else that wants to be listed @group Entity */\n  readonly ThanksTo?: string\n  /** Name of the organization publishing the media (i.e. the record label) @group Entity */\n  readonly Publisher?: string\n  /** Publisher's official webpage @group Entity */\n  readonly Publisher_URL?: string\n  /** Brand or trademark associated with the marketing of music recordings and music videos @group Entity */\n  readonly Label?: string\n  /** Main genre of the media (e.g. classical, ambient-house, synthpop, sci-fi, drama, etc.) @group Classification */\n  readonly Genre?: string\n  /** Podcast category @group Classification */\n  readonly PodcastCategory?: string\n  /** Intended to reflect the mood of the item with a few keywords (e.g. Romantic, Sad, Uplifting, etc.) @group Classification */\n  readonly Mood?: string\n  /** The type or genre of the content (e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc.) @group Classification */\n  readonly ContentType?: string\n  /** Describes the topic of the file (e.g. \"Aerial view of Seattle.\") @group Classification */\n  readonly Subject?: string\n  /** A short description of the contents (e.g. \"Two birds flying.\") @group Classification */\n  readonly Description?: string\n  /** Keywords for the content separated by a comma, used for searching @group Classification */\n  readonly Keywords?: string\n  /** Plot outline or a summary of the story @group Classification */\n  readonly Summary?: string\n  /** Description of the story line of the item @group Classification */\n  readonly Synopsis?: string\n  /** Describes the period that the piece is from or about (e.g. Renaissance) @group Classification */\n  readonly Period?: string\n  /** Legal rating of a movie. Format depends on country of origin (e.g. PG, 16) @group Classification */\n  readonly LawRating?: string\n  /** Reason for the law rating @group Classification */\n  readonly LawRating_Reason?: string\n  /** The ICRA rating (previously RSACi) @group Classification */\n  readonly ICRA?: string\n  /** Date/year that the content was released @group Temporal */\n  readonly Released_Date?: string\n  /** Date/year that the content was originally released @group Temporal */\n  readonly Original_Released_Date?: string\n  /** Time/date/year that the recording began @group Temporal */\n  readonly Recorded_Date?: string\n  /** Time/date/year that the encoding of this content was completed @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time/date/year that the tags were added to this content @group Temporal */\n  readonly Tagged_Date?: string\n  /** Time/date/year that the composition of the music/script began @group Temporal */\n  readonly Written_Date?: string\n  /** Time/date/year that the content was digitally mastered @group Temporal */\n  readonly Mastered_Date?: string\n  /** Time that the file was created on the file system @group Temporal */\n  readonly File_Created_Date?: string\n  /** Local time that the file was created on the file system (not to be used in an international database) @group Temporal */\n  readonly File_Created_Date_Local?: string\n  /** Time that the file was last modified on the file system @group Temporal */\n  readonly File_Modified_Date?: string\n  /** Local time that the file was last modified on the file system (not to be used in an international database) @group Temporal */\n  readonly File_Modified_Date_Local?: string\n  /** Location where track was recorded, as Longitude+Latitude @group Spatial */\n  readonly Recorded_Location?: string\n  /** Location that the item was originally designed/written @group Spatial */\n  readonly Written_Location?: string\n  /** Location where an item is archived (e.g. Louvre, Paris, France) @group Spatial */\n  readonly Archival_Location?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** Name of the software package used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating system of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Operating system used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_OperatingSystem_String?: string\n  /** Name of the operating system company @group Technical */\n  readonly Encoded_OperatingSystem_CompanyName?: string\n  /** Name of the operating system @group Technical */\n  readonly Encoded_OperatingSystem_Name?: string\n  /** Version of the operating system @group Technical */\n  readonly Encoded_OperatingSystem_Version?: string\n  /** Hardware of the encoding software @group Technical */\n  readonly Encoded_Hardware?: string\n  /** Hardware used to create the file, in the format \"CompanyName ProductName (ModelName) Version\" @group Technical */\n  readonly Encoded_Hardware_String?: string\n  /** Name of the hardware company @group Technical */\n  readonly Encoded_Hardware_CompanyName?: string\n  /** Name of the hardware @group Technical */\n  readonly Encoded_Hardware_Name?: string\n  /** Model of the hardware @group Technical */\n  readonly Encoded_Hardware_Model?: string\n  /** Version of the hardware @group Technical */\n  readonly Encoded_Hardware_Version?: string\n  /** Describes whether an image has been cropped and, if so, how it was cropped @group Technical */\n  readonly Cropped?: string\n  /** Specifies the size of the original subject of the file (e.g. 8.5 in h, 11 in w) @group Technical */\n  readonly Dimensions?: string\n  /** Stores dots per inch setting of the digitization mechanism used to produce the file @group Technical */\n  readonly DotsPerInch?: string\n  /** Describes the changes in lightness settings on the digitization mechanism made during the production of the file @group Technical */\n  readonly Lightness?: string\n  /** Original medium of the material (e.g. vinyl, Audio-CD, Super8 or BetaMax) @group Technical */\n  readonly OriginalSourceMedium?: string\n  /** Original form of the material (e.g. slide, paper, map) @group Technical */\n  readonly OriginalSourceForm?: string\n  /** Number of colors requested when digitizing (e.g. 256 for images or 32 bit RGB for video) @group Technical */\n  readonly OriginalSourceForm_NumColors?: string\n  /** Name of the product the file was originally intended for @group Technical */\n  readonly OriginalSourceForm_Name?: string\n  /** Describes whether the original image has been cropped and, if so, how it was cropped (e.g. 16:9 to 4:3, top and bottom) @group Technical */\n  readonly OriginalSourceForm_Cropped?: string\n  /** Identifies changes in sharpness the digitization mechanism made during the production of the file @group Technical */\n  readonly OriginalSourceForm_Sharpness?: string\n  /** Software used to tag the file @group Technical */\n  readonly Tagged_Application?: string\n  /** Average number of beats per minute @group Technical */\n  readonly BPM?: string\n  /** International Standard Recording Code, excluding the ISRC prefix and including hyphens @group Identifier */\n  readonly ISRC?: string\n  /** International Standard Book Number @group Identifier */\n  readonly ISBN?: string\n  /** International Standard Audiovisual Number @group Identifier */\n  readonly ISAN?: string\n  /** EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier @group Identifier */\n  readonly BarCode?: string\n  /** Library of Congress Control Number @group Identifier */\n  readonly LCCN?: string\n  /** Universal Media Identifier */\n  readonly UMID?: string\n  /** A label-specific catalogue number used to identify the release (e.g. TIC 01) @group Identifier */\n  readonly CatalogNumber?: string\n  /** Label code (e.g. 12345, meaning LC-12345) @group Identifier */\n  readonly LabelCode?: string\n  /** Owner of the file @group Legal */\n  readonly Owner?: string\n  /** Copyright attribution @group Legal */\n  readonly Copyright?: string\n  /** Link to a site with copyright/legal information @group Legal */\n  readonly Copyright_Url?: string\n  /** Copyright information as per the production copyright holder @group Legal */\n  readonly Producer_Copyright?: string\n  /** License information (e.g. All Rights Reserved, Any Use Permitted) @group Legal */\n  readonly TermsOfUse?: string\n  /** Name of assisted service @group Legal */\n  readonly ServiceName?: string\n  /** Channel of assisted service @group Legal */\n  readonly ServiceChannel?: string\n  /** URL of of assisted service @group Legal */\n  readonly Service_Url?: string\n  /** Provider of assisted service @group Legal */\n  readonly ServiceProvider?: string\n  /** URL of provider of assisted service @group Legal */\n  readonly ServiceProvider_Url?: string\n  /** Type of assisted service @group Legal */\n  readonly ServiceType?: string\n  /** Television network name @group Legal */\n  readonly NetworkName?: string\n  /** Television network name of original broadcast @group Legal */\n  readonly OriginalNetworkName?: string\n  /** Country information of the content @group Legal */\n  readonly Country?: string\n  /** Time zone information of the content @group Legal */\n  readonly TimeZone?: string\n  /** Is there a cover? Result will be \"Yes\" if present, empty if not @group Info */\n  readonly Cover?: string\n  /** Short description of cover image file (e.g. Earth in space) @group Info */\n  readonly Cover_Description?: string\n  /** Cover type (e.g. \"Cover (front)\") @group Info */\n  readonly Cover_Type?: string\n  /** MIME type of cover file (e.g. image/png) @group Info */\n  readonly Cover_Mime?: string\n  /** Cover, in binary format, encoded as Base64 @group Info */\n  readonly Cover_Data?: string\n  /** Text of a song @group Info */\n  readonly Lyrics?: string\n  /** Any comment related to the content @group Personal */\n  readonly Comment?: string\n  /** A numeric value defining how much a person likes the song/movie, 1 to 5 (e.g. 2, 5.0) @group Personal */\n  readonly Rating?: string\n  /** Date/year the item was added to the owners collection @group Personal */\n  readonly Added_Date?: string\n  /** Date the owner first played an item @group Personal */\n  readonly Played_First_Date?: string\n  /** Date the owner last played an item @group Personal */\n  readonly Played_Last_Date?: string\n  /** Number of times an item was played @group Personal */\n  readonly Played_Count?: number\n  /** Beginning position for Electronic Program Guide */\n  readonly EPG_Positions_Begin?: number\n  /** Ending position for Electronic Program Guide */\n  readonly EPG_Positions_End?: number\n}\n\nexport interface ImageTrack extends BaseTrack {\n  readonly '@type': 'Image'\n  /** Type */\n  readonly Type?: string\n  /** Title of track */\n  readonly Title?: string\n  /** High Dynamic Range Format used */\n  readonly HDR_Format?: string\n  /** HDR Format used, along with version, profile, level, layers, settings, and compatibility information */\n  readonly HDR_Format_String?: string\n  /** Commercial name used by vendor for these HDR settings or HDR Format field if there is no difference */\n  readonly HDR_Format_Commercial?: string\n  /** Version of HDR Format */\n  readonly HDR_Format_Version?: string\n  /** Profile of HDR Format */\n  readonly HDR_Format_Profile?: string\n  /** Level of HDR Format */\n  readonly HDR_Format_Level?: string\n  /** HDR Format settings */\n  readonly HDR_Format_Settings?: string\n  /** HDR Format compatibility with commercial products (e.g. HDR10) */\n  readonly HDR_Format_Compatibility?: string\n  /** Order of bytes required for decoding. Options are Big/Little */\n  readonly Format_Settings_Endianness?: string\n  /** Data packing method used in DPX frames (e.g. Packed, Filled A, Filled B) */\n  readonly Format_Settings_Packing?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** Width of frame (trimmed to \"clean aperture\" size if present) in pixels, as integer (e.g. 1920) */\n  readonly Width?: number\n  /** Width of frame (trimmed to \"clean aperture\" size if present) in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_String?: string\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset?: number\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset_String?: string\n  /** Width of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1920) */\n  readonly Width_Original?: number\n  /** Width of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_Original_String?: string\n  /** Height of frame (including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height?: number\n  /** Height of frame (including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_String?: string\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset?: number\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset_String?: string\n  /** Height of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height_Original?: number\n  /** Height of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_Original_String?: string\n  /** Pixel Aspect ratio */\n  readonly PixelAspectRatio?: number\n  /** Pixel Aspect ratio */\n  readonly PixelAspectRatio_String?: string\n  /** Original (in the raw stream) Pixel Aspect ratio */\n  readonly PixelAspectRatio_Original?: number\n  /** Original (in the raw stream) Pixel Aspect ratio */\n  readonly PixelAspectRatio_Original_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original_String?: string\n  /** Width of frame, not considering black bars */\n  readonly Active_Width?: number\n  /** Width of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Active_Width_String?: string\n  /** Height of frame, not considering black bars */\n  readonly Active_Height?: number\n  /** Height of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Active_Height_String?: string\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio?: number\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio_String?: string\n  /** Color profile of the image (e.g. YUV) */\n  readonly ColorSpace?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling?: string\n  /** Color information stored in the frame, as integer (e.g. 10) */\n  readonly BitDepth?: number\n  /** Color information stored in the frame, as string (e.g. 10 bits) */\n  readonly BitDepth_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Plot outline or a summary of the story */\n  readonly Summary?: string\n  /** Time that the encoding of this item was completed, in UTC @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time that the tags were added to this item, in UTC @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n  /** Presence of color description (Yes, No) */\n  readonly colour_description_present?: string\n  /** Presence of colour description (source) */\n  readonly colour_description_present_Source?: string\n  /** Presence of colour description (if incoherencies) */\n  readonly colour_description_present_Original?: string\n  /** Presence of colour description (source if incoherencies) */\n  readonly colour_description_present_Original_Source?: string\n  /** Color range for YUV color space */\n  readonly colour_range?: string\n  /** Colour range for YUV colour space (source) */\n  readonly colour_range_Source?: string\n  /** Colour range for YUV colour space (if incoherencies) */\n  readonly colour_range_Original?: string\n  /** Colour range for YUV colour space (source if incoherencies) */\n  readonly colour_range_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries */\n  readonly colour_primaries?: string\n  /** Chromaticity coordinates of the source primaries (source) */\n  readonly colour_primaries_Source?: string\n  /** Chromaticity coordinates of the source primaries (if incoherencies) */\n  readonly colour_primaries_Original?: string\n  /** Chromaticity coordinates of the source primaries (source if incoherencies) */\n  readonly colour_primaries_Original_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture */\n  readonly transfer_characteristics?: string\n  /** Opto-electronic transfer characteristic of the source picture (source) */\n  readonly transfer_characteristics_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture (if incoherencies) */\n  readonly transfer_characteristics_Original?: string\n  /** Opto-electronic transfer characteristic of the source picture (source if incoherencies) */\n  readonly transfer_characteristics_Original_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries */\n  readonly matrix_coefficients?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source) */\n  readonly matrix_coefficients_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (if incoherencies) */\n  readonly matrix_coefficients_Original?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source if incoherencies) */\n  readonly matrix_coefficients_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display */\n  readonly MasteringDisplay_ColorPrimaries?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source) */\n  readonly MasteringDisplay_ColorPrimaries_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original_Source?: string\n  /** Luminance of the mastering display */\n  readonly MasteringDisplay_Luminance?: string\n  /** Luminance of the mastering display (source) */\n  readonly MasteringDisplay_Luminance_Source?: string\n  /** Luminance of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original?: string\n  /** Luminance of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original_Source?: string\n  /** Maximum content light level */\n  readonly MaxCLL?: string\n  /** Maximum content light level (source) */\n  readonly MaxCLL_Source?: string\n  /** Maximum content light level (if incoherencies) */\n  readonly MaxCLL_Original?: string\n  /** Maximum content light level (source if incoherencies) */\n  readonly MaxCLL_Original_Source?: string\n  /** Maximum frame average light level */\n  readonly MaxFALL?: string\n  /** Maximum frame average light level (source) */\n  readonly MaxFALL_Source?: string\n  /** Maximum frame average light level (if incoherencies) */\n  readonly MaxFALL_Original?: string\n  /** Maximum frame average light level (source if incoherencies) */\n  readonly MaxFALL_Original_Source?: string\n}\n\nexport interface MenuTrack extends BaseTrack {\n  readonly '@type': 'Menu'\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Start time of stream, in UTC */\n  readonly Duration_Start?: number\n  /** End time of stream, in UTC */\n  readonly Duration_End?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (in case of timecode for example) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame */\n  readonly Delay_DropFrame?: string\n  /** Part of the file where the delay was set (e.g. Container, Stream, or empty) */\n  readonly Delay_Source?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_String?: string\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Numer of frames */\n  readonly FrameCount?: number\n  /** List of programs available */\n  readonly List_StreamKind?: string\n  /** List of programs available */\n  readonly List_StreamPos?: string\n  /** List of programs available */\n  readonly List?: string\n  /** List of programs available */\n  readonly List_String?: string\n  /** Name of this menu */\n  readonly Title?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Name of assisted service @group Legal */\n  readonly ServiceName?: string\n  /** Channel of assisted service @group Legal */\n  readonly ServiceChannel?: string\n  /** URL of assisted service @group Legal */\n  readonly Service_Url?: string\n  /** Provider of assisted service @group Legal */\n  readonly ServiceProvider?: string\n  /** URL of provider of assisted service @group Legal */\n  readonly ServiceProvider_Url?: string\n  /** Type of assisted service @group Legal */\n  readonly ServiceType?: string\n  /** Television network name @group Legal */\n  readonly NetworkName?: string\n  /** Television network name of original broadcast @group Legal */\n  readonly Original_NetworkName?: string\n  /** Country information of the content @group Legal */\n  readonly Countries?: string\n  /** TimeZone information of the content @group Legal */\n  readonly TimeZones?: string\n  /** Legal rating of a movie. Format depends on country of origin (e.g. PG, 16) @group Classification */\n  readonly LawRating?: string\n  /** Reason of the law rating @group Classification */\n  readonly LawRating_Reason?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Used by third-party developers to know about the beginning of the chapters list, to be used by Get (Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End */\n  readonly Chapters_Pos_Begin?: number\n  /** Used by third-party developers to know about the end of the chapters list (this position excluded) */\n  readonly Chapters_Pos_End?: number\n}\n\nexport interface OtherTrack extends BaseTrack {\n  readonly '@type': 'Other'\n  /** Type */\n  readonly Type?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** How this file is muxed in the container */\n  readonly MuxingMode?: string\n  /** More information about MuxingMode */\n  readonly MuxingMode_MoreInfo?: string\n  /** Play time of the stream in ms */\n  readonly Duration?: number\n  /** Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Duration_String?: string\n  /** Play time in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Duration_String1?: string\n  /** Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Duration_String2?: string\n  /** Play time in format : HH:MM:SS.MMM */\n  readonly Duration_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  readonly Duration_Start?: number\n  readonly Duration_End?: number\n  /** Source Play time of the stream, in ms */\n  readonly Source_Duration?: number\n  /** Source Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_String?: string\n  /** Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Source_Duration_String1?: string\n  /** Source Play time in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_String2?: string\n  /** Source Play time in format : HH:MM:SS.MMM */\n  readonly Source_Duration_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Source Duration of the first frame if it is longer than others, in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Source Duration of the last frame if it is longer than others, in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode (VBR, CBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode (Variable, Cconstant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate in bps */\n  readonly BitRate?: number\n  /** Bit rate (with measurement) */\n  readonly BitRate_String?: string\n  /** Minimum Bit rate in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum Bit rate (with measurement) */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal Bit rate in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal Bit rate (with measurement) */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum Bit rate in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum Bit rate (with measurement) */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded (with forced padding) bit rate in bps, if some container padding is present */\n  readonly BitRate_Encoded?: number\n  /** Encoded (with forced padding) bit rate (with measurement), if some container padding is present */\n  readonly BitRate_Encoded_String?: string\n  /** Frames per second */\n  readonly FrameRate?: number\n  /** Frames per second (with measurement) */\n  readonly FrameRate_String?: string\n  /** Frames per second, numerator */\n  readonly FrameRate_Num?: number\n  /** Frames per second, denominator */\n  readonly FrameRate_Den?: number\n  /** Number of frames */\n  readonly FrameCount?: number\n  /** Source Number of frames */\n  readonly Source_FrameCount?: number\n  /** Delay fixed in the stream (relative) IN MS */\n  readonly Delay?: number\n  /** Delay with measurement */\n  readonly Delay_String?: string\n  /** Delay with measurement */\n  readonly Delay_String1?: string\n  /** Delay with measurement */\n  readonly Delay_String2?: string\n  /** Delay in format : HH:MM:SS.MMM */\n  readonly Delay_String3?: string\n  /** Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (in case of timecode for example) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame */\n  readonly Delay_DropFrame?: string\n  /** Delay source (Container or Stream or empty) */\n  readonly Delay_Source?: string\n  /** Delay source (Container or Stream or empty) */\n  readonly Delay_Source_String?: string\n  /** Delay fixed in the raw stream (relative) IN MS */\n  readonly Delay_Original?: number\n  /** Delay with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay in format: HH:MM:SS.MMM */\n  readonly Delay_Original_String3?: string\n  /** Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (in case of timecode for example) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame info */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (Stream or empty) */\n  readonly Delay_Original_Source?: string\n  /** Delay fixed in the stream (absolute / video) */\n  readonly Video_Delay?: number\n  readonly Video_Delay_String?: string\n  readonly Video_Delay_String1?: string\n  readonly Video_Delay_String2?: string\n  readonly Video_Delay_String3?: string\n  readonly Video_Delay_String4?: string\n  readonly Video_Delay_String5?: string\n  /** TimeStamp fixed in the stream (relative) IN MS */\n  readonly TimeStamp_FirstFrame?: number\n  /** TimeStamp with measurement */\n  readonly TimeStamp_FirstFrame_String?: string\n  /** TimeStamp with measurement */\n  readonly TimeStamp_FirstFrame_String1?: string\n  /** TimeStamp with measurement */\n  readonly TimeStamp_FirstFrame_String2?: string\n  /** TimeStamp in format : HH:MM:SS.MMM */\n  readonly TimeStamp_FirstFrame_String3?: string\n  /** TimeStamp in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available */\n  readonly TimeStamp_FirstFrame_String4?: string\n  /** TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly TimeStamp_FirstFrame_String5?: string\n  /** Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code of the last frame (excluding the duration of the last frame) in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format */\n  readonly TimeCode_LastFrame?: string\n  /** Delay drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code is Stripped (only 1st time code, no discontinuity) */\n  readonly TimeCode_Stripped?: string\n  /** Time code is Stripped (only 1st time code, no discontinuity) */\n  readonly TimeCode_Stripped_String?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) */\n  readonly TimeCode_Source?: string\n  /** Streamsize in bytes */\n  readonly StreamSize?: number\n  /** Streamsize in with percentage value */\n  readonly StreamSize_String?: string\n  readonly StreamSize_String1?: string\n  readonly StreamSize_String2?: string\n  readonly StreamSize_String3?: string\n  readonly StreamSize_String4?: string\n  /** Streamsize in with percentage value */\n  readonly StreamSize_String5?: string\n  /** Stream size divided by file size */\n  readonly StreamSize_Proportion?: string\n  /** StreamSize in bytes of hte stream after demux */\n  readonly StreamSize_Demuxed?: number\n  /** StreamSize_Demuxed in with percentage value */\n  readonly StreamSize_Demuxed_String?: string\n  readonly StreamSize_Demuxed_String1?: string\n  readonly StreamSize_Demuxed_String2?: string\n  readonly StreamSize_Demuxed_String3?: string\n  readonly StreamSize_Demuxed_String4?: string\n  /** StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Source Streamsize in bytes */\n  readonly Source_StreamSize?: number\n  /** Source Streamsize in with percentage value */\n  readonly Source_StreamSize_String?: string\n  readonly Source_StreamSize_String1?: string\n  readonly Source_StreamSize_String2?: string\n  readonly Source_StreamSize_String3?: string\n  readonly Source_StreamSize_String4?: string\n  /** Source Streamsize in with percentage value */\n  readonly Source_StreamSize_String5?: string\n  /** Source Stream size divided by file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Encoded Streamsize in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Encoded Streamsize in with percentage value */\n  readonly StreamSize_Encoded_String?: string\n  readonly StreamSize_Encoded_String1?: string\n  readonly StreamSize_Encoded_String2?: string\n  readonly StreamSize_Encoded_String3?: string\n  readonly StreamSize_Encoded_String4?: string\n  /** Encoded Streamsize in with percentage value */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Source Encoded Streamsize in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Source Encoded Streamsize in with percentage value */\n  readonly Source_StreamSize_Encoded_String?: string\n  readonly Source_StreamSize_Encoded_String1?: string\n  readonly Source_StreamSize_Encoded_String2?: string\n  readonly Source_StreamSize_Encoded_String3?: string\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Source Encoded Streamsize in with percentage value */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** Name of this menu */\n  readonly Title?: string\n  /** Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) */\n  readonly Language?: string\n  /** Language (full) */\n  readonly Language_String?: string\n  /** Language (full) */\n  readonly Language_String1?: string\n  /** Language (2-letter ISO 639-1 if exists, else empty) */\n  readonly Language_String2?: string\n  /** Language (3-letter ISO 639-2 if exists, else empty) */\n  readonly Language_String3?: string\n  /** Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) */\n  readonly Language_String4?: string\n  /** More info about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Service kind, e.g. visually impaired, commentary, voice over */\n  readonly ServiceKind?: string\n  /** Service kind (full) */\n  readonly ServiceKind_String?: string\n  /** Set if that track should not be used */\n  readonly Disabled?: string\n  /** Set if that track should not be used */\n  readonly Disabled_String?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Default?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Default_String?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Forced?: string\n  /** Set if that track should be used if no language found matches the user preference. */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n}\n\nexport interface TextTrack extends BaseTrack {\n  readonly '@type': 'Text'\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Internet Media Type (aka MIME Type, Content-Type) */\n  readonly InternetMediaType?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** More information about MuxingMode */\n  readonly MuxingMode_MoreInfo?: string\n  /** Play time of the stream, in ms */\n  readonly Duration?: number\n  /** Play time of the stream in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time of the stream in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time of the stream in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time of the stream in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time of the stream in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time  of the streamin format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Play time from first display to last display, in ms */\n  readonly Duration_Start2End?: number\n  /** Play time from first display to last display in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_Start2End_String?: string\n  /** Play time from first display to last display in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_Start2End_String1?: string\n  /** Play time from first display to last display in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_Start2End_String2?: string\n  /** Play time from first display to last display in format HH:MM:SS.mmm */\n  readonly Duration_Start2End_String3?: string\n  /** Play time from first display to last display in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_Start2End_String4?: string\n  /** Play time from first display to last display in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_Start2End_String5?: string\n  /** Timestamp of first command, in ms */\n  readonly Duration_Start_Command?: number\n  /** Timestamp of first command in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_Start_Command_String?: string\n  /** Timestamp of first command in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_Start_Command_String1?: string\n  /** Timestamp of first command in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_Start_Command_String2?: string\n  /** Timestamp of first command in format HH:MM:SS.mmm */\n  readonly Duration_Start_Command_String3?: string\n  /** Timestamp of first command in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_Start_Command_String4?: string\n  /** Timestamp of first command in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_Start_Command_String5?: string\n  /** Timestamp of first display, in ms */\n  readonly Duration_Start?: number\n  /** Timestamp of first display in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_Start_String?: string\n  /** Timestamp of first display in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_Start_String1?: string\n  /** Timestamp of first display in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_Start_String2?: string\n  /** Timestamp of first display in format HH:MM:SS.mmm */\n  readonly Duration_Start_String3?: string\n  /** Timestamp of first display in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_Start_String4?: string\n  /** Timestamp of first display in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_Start_String5?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration_End?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_End_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_End_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_End_String2?: string\n  /** Play time in format HH:MM:SS.mmm */\n  readonly Duration_End_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_End_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_End_String5?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration_End_Command?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_End_Command_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_End_Command_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_End_Command_String2?: string\n  /** Play time in format HH:MM:SS.mmm */\n  readonly Duration_End_Command_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_End_Command_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_End_Command_String5?: string\n  /** Duration of the first frame (if different than other frames), in ms */\n  readonly Duration_FirstFrame?: number\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_FirstFrame_String?: string\n  /** Duration of the first frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_FirstFrame_String1?: string\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_FirstFrame_String2?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_FirstFrame_String3?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_FirstFrame_String4?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_FirstFrame_String5?: string\n  /** Duration of the last frame (if different than other frames), in ms */\n  readonly Duration_LastFrame?: number\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_LastFrame_String?: string\n  /** Duration of the last frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_LastFrame_String1?: string\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_LastFrame_String2?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_LastFrame_String3?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_LastFrame_String4?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_LastFrame_String5?: string\n  /** Temporal coordinate system used for timestamps */\n  readonly Duration_Base?: string\n  /** Duration of content stored in the file (if different than duration), in ms */\n  readonly Source_Duration?: number\n  /** Duration of content stored in the file (if different than duration), in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_String?: string\n  /** Duration of content stored in the file (if different than duration), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_String1?: string\n  /** Duration of content stored in the file (if different than duration), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_String2?: string\n  /** Duration of content stored in the file (if different than duration), in format HH:MM:SS.mmm */\n  readonly Source_Duration_String3?: string\n  /** Duration of content stored in the file (if different than duration), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Duration of content stored in the file (if different than duration), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HH:MM:SS.mmm */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Duration of the first frame of content stored in the file (if different than other frames),in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames),in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Duration of the last frame of content stored in the file (if different than other frames),in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Duration of the last frame of content stored in the file (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode of this stream (CBR, VBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode of this stream, as word (Variable, Constant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate of this stream, in bps */\n  readonly BitRate?: number\n  /** Bit rate of this stream, with measurement (e.g. 128 kb/s) */\n  readonly BitRate_String?: string\n  /** Minimum bit rate of this stream, in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum bit rate of this stream, with measurement */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal bit rate of this stream, in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal bit rate of this stream, with measurement */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum bit rate of this stream, in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum bit rate of this stream, with measurement */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded?: number\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded_String?: string\n  /** \"Width of frame (trimmed to \"\"clean aperture\"\" size if present) in characters\" */\n  readonly Width?: number\n  /** \"Width of frame (trimmed to \"\"clean aperture\"\" size if present) in characters, presented in SI unit digit spacing style, with measurement\" */\n  readonly Width_String?: string\n  /** Height of frame (including aperture size if present) in characters */\n  readonly Height?: number\n  /** Height of frame (including aperture size if present) in characters, present in SI unit digit spacing style, with measurement */\n  readonly Height_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original_String?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_String?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode_Original?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_Original_String?: string\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Minimum frames per second (e.g. 25.000) */\n  readonly FrameRate_Minimum?: number\n  /** Minimum frames per second, with measurement (e.g. 25.000 FPS) */\n  readonly FrameRate_Minimum_String?: string\n  /** Frames per second rounded to closest standard (e.g. 29.97) */\n  readonly FrameRate_Nominal?: number\n  /** Frames per second rounded to closest standard, with measurement (e.g. 29.97 fps) */\n  readonly FrameRate_Nominal_String?: string\n  /** Maximum frames per second */\n  readonly FrameRate_Maximum?: number\n  /** Maximum frames per second, with measurement */\n  readonly FrameRate_Maximum_String?: string\n  /** Frames per second */\n  readonly FrameRate_Original?: number\n  /** Frames per second, with measurement */\n  readonly FrameRate_Original_String?: string\n  /** Frames per second, numerator */\n  readonly FrameRate_Original_Num?: number\n  /** Frames per second, denominator */\n  readonly FrameRate_Original_Den?: number\n  /** Numer of frames */\n  readonly FrameCount?: number\n  /** Number of displayed elements */\n  readonly ElementCount?: number\n  /** Number of frames according to media header (media/stts atom) data */\n  readonly Source_FrameCount?: number\n  /** Color profile of the image (e.g. YUV) */\n  readonly ColorSpace?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling?: string\n  /** Color information stored in the video frames, as integer (e.g. 10) */\n  readonly BitDepth?: number\n  /** Color information stored in the video frames, as string (e.g. 10 bits) */\n  readonly BitDepth_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_DropFrame?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source_String?: string\n  /** Delay, in ms */\n  readonly Delay_Original?: number\n  /** Delay, with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay, in format HH:MM:SS.mmm */\n  readonly Delay_Original_String3?: string\n  /** Delay, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (e.g. Container, Stream, empty) */\n  readonly Delay_Original_Source?: string\n  /** Delay fixed in the stream relative to video, in ms (e.g. -80) */\n  readonly Video_Delay?: number\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String1?: string\n  /** Delay fixed in the stream relative to video, in ms, with measurement (e.g. -80 ms) */\n  readonly Video_Delay_String2?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (e.g. -00:00:00.080) */\n  readonly Video_Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with the last colon replaced by semicolon for drop frame if available */\n  readonly Video_Delay_String4?: string\n  /** Delay fixed in the stream relative to video, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Video_Delay_String5?: string\n  /** Time code for first frame in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code for last frame (excluding the duration of the last frame) in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_LastFrame?: string\n  /** Time code drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Additional time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC, etc.) */\n  readonly TimeCode_Source?: string\n  /** Maximum frame number in time codes */\n  readonly TimeCode_MaxFrameNumber?: string\n  /** Theoritical maximum frame number in time codes */\n  readonly TimeCode_MaxFrameNumber_Theory?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Size of content stored in the file, in bytes */\n  readonly Source_StreamSize?: number\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_String1?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_String2?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_String3?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_String4?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Size of this stream when encoded, in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String1?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String2?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Encoded_String3?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Encoded_String4?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Size of content stored in the file when encoded, in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String1?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String2?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_Encoded_String3?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** Title of file */\n  readonly Title?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** \"Name of the software package used to create the file, in the format \"\"CompanyName ProductName (OperatingSystem) Version (Date)\"\"\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** \"Software used to create the file, in the format \"\"CompanyName ProductName (OperatingSystem) Version (Date)\"\"\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Plot outline or a summary of the story */\n  readonly Summary?: string\n  /** Time/date/year that the encoding of this content was completed @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time/date/year that the tags were added to this content @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n  readonly Events_Total?: string\n  /** Minimum duration per event, in ms */\n  readonly Events_MinDuration?: number\n  /** Minimum duration per event in format XXx YYy, with YYy value omitted if zero */\n  readonly Events_MinDuration_String?: string\n  /** Minimum duration per event in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Events_MinDuration_String1?: string\n  /** Minimum duration per event in format XXx YYy, with YYy omitted if value is zero */\n  readonly Events_MinDuration_String2?: string\n  /** Minimum duration per event in format HH:MM:SS.mmm */\n  readonly Events_MinDuration_String3?: string\n  /** Minimum duration per event in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Events_MinDuration_String4?: string\n  /** Minimum duration per event in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Events_MinDuration_String5?: string\n  readonly Events_PopOn?: string\n  readonly Events_RollUp?: string\n  readonly Events_PaintOn?: string\n  readonly Lines_Count?: string\n  readonly Lines_MaxCountPerEvent?: number\n  readonly Lines_MaxCharacterCount?: number\n  readonly FirstDisplay_Delay_Frames?: string\n  readonly FirstDisplay_Type?: string\n}\n\nexport interface VideoTrack extends BaseTrack {\n  readonly '@type': 'Video'\n  /** Level of the Format */\n  readonly Format_Level?: string\n  /** Tier of the Format */\n  readonly Format_Tier?: string\n  /** Profile of the base stream for Multiview Video Coding */\n  readonly MultiView_BaseProfile?: string\n  /** View count for Multiview Video Coding */\n  readonly MultiView_Count?: string\n  /** How views are muxed in the container for Multiview Video Coding */\n  readonly MultiView_Layout?: string\n  /** High Dynamic Range Format used */\n  readonly HDR_Format?: string\n  /** HDR Format used, along with version, profile, level, layers, settings, and compatibility information */\n  readonly HDR_Format_String?: string\n  /** Commercial name used by vendor for these HDR settings or HDR Format field if there is no difference */\n  readonly HDR_Format_Commercial?: string\n  /** Version of HDR Format */\n  readonly HDR_Format_Version?: string\n  /** Profile of HDR Format */\n  readonly HDR_Format_Profile?: string\n  /** Level of HDR Format */\n  readonly HDR_Format_Level?: string\n  /** HDR Format settings */\n  readonly HDR_Format_Settings?: string\n  /** Compression format of HDR Format */\n  readonly HDR_Format_Compression?: string\n  /** HDR Format compatibility with commercial products (e.g. HDR10) */\n  readonly HDR_Format_Compatibility?: string\n  /** Whether BVOP settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_BVOP?: string\n  /** Whether BVOP settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_BVOP_String?: string\n  /** Whether Quarter-pixel motion settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_QPel?: string\n  /** Whether Quarter-pixel motion settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_QPel_String?: string\n  /** Whether Global Motion Compensation settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_GMC?: number\n  /** Whether Global Motion Compensation settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_GMC_String?: string\n  /** Whether Matrix settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_Matrix?: string\n  /** Whether Matrix settings are required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_Matrix_String?: string\n  /** Matrix data, in base64-encoded binary format. Order: intra, non-intra, gray intra, gray non-intra */\n  readonly Format_Settings_Matrix_Data?: string\n  /** Whether CABAC support is required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_CABAC?: string\n  /** Whether CABAC support is  required for decoding MPEG (Yes, No) */\n  readonly Format_Settings_CABAC_String?: string\n  /** Whether reference frames settings are required for decoding AVC (Yes, No) */\n  readonly Format_Settings_RefFrames?: number\n  /** Whether reference frames settings are required for decoding AVC (Yes, No) */\n  readonly Format_Settings_RefFrames_String?: string\n  /** Pulldown method (for film transferred to video) */\n  readonly Format_Settings_Pulldown?: string\n  /** Order of bytes required for decoding (Big, Little) */\n  readonly Format_Settings_Endianness?: string\n  /** Data packing method used in DPX frames (e.g. Packed, Filled A, Filled B) */\n  readonly Format_Settings_Packing?: string\n  /** Frame mode for decoding (e.g. Frame doubling, Frame tripling) */\n  readonly Format_Settings_FrameMode?: string\n  /** GOP method set for format (e.g. N=1, Variable) */\n  readonly Format_Settings_GOP?: string\n  /** Picture structure method set for format (e.g. Frame, Field) */\n  readonly Format_Settings_PictureStructure?: string\n  /** Wrapping mode set for format (e.g. Frame, Clip) */\n  readonly Format_Settings_Wrapping?: string\n  /** Numer of slices per frame */\n  readonly Format_Settings_SliceCount?: number\n  /** Numer of slices per frame */\n  readonly Format_Settings_SliceCount_String?: string\n  /** Internet Media Type a.k.a. MIME Type, Content-Type */\n  readonly InternetMediaType?: string\n  /** How this file is muxed in the container (e.g. Muxed in Video #1) */\n  readonly MuxingMode?: string\n  /** Play time of the stream, in s (ms for text output) */\n  readonly Duration?: number\n  /** Play time in format XXx YYy, with YYy value omitted if zero (e.g. 1 h 40 min) */\n  readonly Duration_String?: string\n  /** Play time in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_String1?: string\n  /** Play time in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_String2?: string\n  /** Play time in format HH:MM:SS.mmm (e.g. 01:40:00.000) */\n  readonly Duration_String3?: string\n  /** Play time in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_String4?: string\n  /** Play time in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_String5?: string\n  /** Duration of the first frame (if different than other frames), in ms */\n  readonly Duration_FirstFrame?: number\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_FirstFrame_String?: string\n  /** Duration of the first frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_FirstFrame_String1?: string\n  /** Duration of the first frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_FirstFrame_String2?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_FirstFrame_String3?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_FirstFrame_String4?: string\n  /** Duration of the first frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_FirstFrame_String5?: string\n  /** Duration of the last frame (if different than other frames), in ms */\n  readonly Duration_LastFrame?: number\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy value omitted if zero */\n  readonly Duration_LastFrame_String?: string\n  /** Duration of the last frame (if different than other frames), in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Duration_LastFrame_String1?: string\n  /** Duration of the last frame (if different than other frames), in format XXx YYy, with YYy omitted if value is zero */\n  readonly Duration_LastFrame_String2?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm */\n  readonly Duration_LastFrame_String3?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Duration_LastFrame_String4?: string\n  /** Duration of the last frame (if different than other frames), in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Duration_LastFrame_String5?: string\n  /** Duration of the file, of content stored in the file, in ms */\n  readonly Source_Duration?: number\n  /** Duration of the file, of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_String?: string\n  /** Duration of the file, of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_String1?: string\n  /** Duration of the file, of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_String2?: string\n  /** Duration of the file, of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_String3?: string\n  /** Duration of the file, of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_String4?: string\n  /** Duration of the file, of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_String5?: string\n  /** Duration of the first frame, of content stored in the file, in ms */\n  readonly Source_Duration_FirstFrame?: number\n  /** Duration of the first frame, of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_FirstFrame_String?: string\n  /** Duration of the first frame, of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_FirstFrame_String1?: string\n  /** Duration of the first frame, of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_FirstFrame_String2?: string\n  /** Duration of the first frame, of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_FirstFrame_String3?: string\n  /** Duration of the first frame, of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_FirstFrame_String4?: string\n  /** Duration of the first frame, of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_FirstFrame_String5?: string\n  /** Duration of the last frame, of content stored in the file, in ms */\n  readonly Source_Duration_LastFrame?: number\n  /** Duration of the last frame, of content stored in the file, in format XXx YYy, with YYy value omitted if zero */\n  readonly Source_Duration_LastFrame_String?: string\n  /** Duration of the last frame, of content stored in the file, in format HHh MMmn SSs MMMms, with any fields omitted if zero */\n  readonly Source_Duration_LastFrame_String1?: string\n  /** Duration of the last frame, of content stored in the file, in format XXx YYy, with YYy omitted if value is zero */\n  readonly Source_Duration_LastFrame_String2?: string\n  /** Duration of the last frame, of content stored in the file, in format HH:MM:SS.mmm */\n  readonly Source_Duration_LastFrame_String3?: string\n  /** Duration of the last frame, of content stored in the file, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Source_Duration_LastFrame_String4?: string\n  /** Duration of the last frame, of content stored in the file, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Source_Duration_LastFrame_String5?: string\n  /** Bit rate mode of this stream (CBR, VBR) */\n  readonly BitRate_Mode?: string\n  /** Bit rate mode of this stream, as word (Variable, Constant) */\n  readonly BitRate_Mode_String?: string\n  /** Bit rate of this stream, in bps */\n  readonly BitRate?: number\n  /** Bit rate of this stream, with measurement (e.g. 128 kb/s) */\n  readonly BitRate_String?: string\n  /** Minimum bit rate of this stream, in bps */\n  readonly BitRate_Minimum?: number\n  /** Minimum bit rate of this stream, with measurement */\n  readonly BitRate_Minimum_String?: string\n  /** Nominal bit rate of this stream, in bps */\n  readonly BitRate_Nominal?: number\n  /** Nominal bit rate of this stream, with measurement */\n  readonly BitRate_Nominal_String?: string\n  /** Maximum bit rate of this stream, in bps */\n  readonly BitRate_Maximum?: number\n  /** Maximum bit rate of this stream, with measurement */\n  readonly BitRate_Maximum_String?: string\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded?: number\n  /** Encoded bit rate (with forced padding), if container padding is present, in bps */\n  readonly BitRate_Encoded_String?: string\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, as integer (e.g. 1920) */\n  readonly Width?: number\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_String?: string\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset?: number\n  /** Offset between original width and displayed width, in pixels */\n  readonly Width_Offset_String?: string\n  /** Width of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1920) */\n  readonly Width_Original?: number\n  /** Width of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_Original_String?: string\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, presented as integer (e.g. 1920) */\n  readonly Width_CleanAperture?: number\n  /** Width of frame (trimmed to clean aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Width_CleanAperture_String?: string\n  /** Height of frame (including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height?: number\n  /** Height of frame (including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_String?: string\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset?: number\n  /** Offset between original height and displayed height, in pixels */\n  readonly Height_Offset_String?: string\n  /** Height of frame (not including aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height_Original?: number\n  /** Height of frame (not including aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Height_Original_String?: string\n  /** Height of frame (trimmed to clean aperture size if present) in pixels, presented as integer (e.g. 1080) */\n  readonly Height_CleanAperture?: number\n  /** Height of frame (trimmed to clean aperture size if present) in pixels, present in SI unit digit spacing style, with measurement (e.g. 1 800 pixels) */\n  readonly Height_CleanAperture_String?: string\n  /** Width of frame, considering data stored in the codec */\n  readonly Stored_Width?: number\n  /** Height of frame, considering data stored in the codec */\n  readonly Stored_Height?: number\n  /** Width of frame, from data derived from video stream */\n  readonly Sampled_Width?: number\n  /** Height of frame, from data derived from video stream */\n  readonly Sampled_Height?: number\n  /** Width of a pixel as compared to the height (e.g. 1.422) */\n  readonly PixelAspectRatio?: number\n  /** Width of a pixel as compared to the height (e.g. 1.422) */\n  readonly PixelAspectRatio_String?: string\n  /** Width of a pixel as compared to the height (e.g. 1.422). This field is only shown if the container and codec values are different */\n  readonly PixelAspectRatio_Original?: number\n  /** Width of a pixel as compared to the height (e.g. 1.422). This field is only shown if the container and codec values are different */\n  readonly PixelAspectRatio_Original_String?: string\n  /** Width of a pixel as compared to the height, considering clean aperture dimensions (e.g. 1.422). This field is only shown if the values are different */\n  readonly PixelAspectRatio_CleanAperture?: number\n  /** Width of a pixel as compared to the height, considering clean aperture dimensions (e.g. 1.422). This field is only shown if the values are different */\n  readonly PixelAspectRatio_CleanAperture_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_String?: string\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original?: number\n  /** The proportional relationship between the width and height of a frame (e.g. 4:3) */\n  readonly DisplayAspectRatio_Original_String?: string\n  /** The proportional relationship between the width and height of a frame, considering clean aperture dimensions (e.g. 4:3) */\n  readonly DisplayAspectRatio_CleanAperture?: number\n  /** The proportional relationship between the width and height of a frame, considering clean aperture dimensions (e.g. 4:3) */\n  readonly DisplayAspectRatio_CleanAperture_String?: string\n  /** Active Format Description, as value code (e.g. 001) */\n  readonly ActiveFormatDescription?: string\n  /** Active Format Description, as text (e.g. 4:3) */\n  readonly ActiveFormatDescription_String?: string\n  /** Muxing mode used for Active Format Description (AFD value). Options are A/53 (for Raw) or SMPTE ST 2016-3 (for Ancillary) */\n  readonly ActiveFormatDescription_MuxingMode?: string\n  /** Width of frame, not considering black bars */\n  readonly Active_Width?: number\n  /** Width of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 920 pixels) */\n  readonly Active_Width_String?: string\n  /** Height of frame, not considering black bars */\n  readonly Active_Height?: number\n  /** Height of frame, not considering black bars, in pixels, presented in SI unit digit spacing style, with measurement (e.g. 1 080 pixels) */\n  readonly Active_Height_String?: string\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio?: number\n  /** The proportional relationship between the active width and active height of a frame (e.g. 4:3) */\n  readonly Active_DisplayAspectRatio_String?: string\n  /** Rotation of video, derived from track header data, in degrees */\n  readonly Rotation?: string\n  /** Rotation of video, derived from track header data, in degrees */\n  readonly Rotation_String?: string\n  /** Frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode?: string\n  /** Frame rate mode, as word (e.g. Constant, Variable) */\n  readonly FrameRate_Mode_String?: string\n  /** Original frame rate mode, as acronym (e.g. CFR, VFR) */\n  readonly FrameRate_Mode_Original?: string\n  /** Original frame rate mode, as word (Constant, Variable) */\n  readonly FrameRate_Mode_Original_String?: string\n  /** Frames per second, as float (e.g. 29.970) */\n  readonly FrameRate?: number\n  /** Frames per second, with measurement (e.g. 29.970 (29970/1000) FPS) */\n  readonly FrameRate_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Den?: number\n  /** Minimum frames per second (e.g. 25.000) */\n  readonly FrameRate_Minimum?: number\n  /** Minimum frames per second, with measurement (e.g. 25.000 FPS) */\n  readonly FrameRate_Minimum_String?: string\n  /** Frames per second rounded to closest standard (e.g. 24.98) */\n  readonly FrameRate_Nominal?: number\n  /** Frames per second rounded to closest standard, with measurement (e.g. 29.97 fps) */\n  readonly FrameRate_Nominal_String?: string\n  /** Maximum frames per second */\n  readonly FrameRate_Maximum?: number\n  /** Maximum frames per second, with measurement */\n  readonly FrameRate_Maximum_String?: string\n  /** Frames per second */\n  readonly FrameRate_Original?: number\n  /** Frames per second, with measurement */\n  readonly FrameRate_Original_String?: string\n  /** Numerator for determined frames per second (e.g. 29970) */\n  readonly FrameRate_Original_Num?: number\n  /** Denominator for determined frames per second (e.g. 1000) */\n  readonly FrameRate_Original_Den?: number\n  /** Real (capture) frames per second */\n  readonly FrameRate_Real?: number\n  /** Real (capture) frames per second (with measurement) */\n  readonly FrameRate_Real_String?: string\n  /** Numer of frames */\n  readonly FrameCount?: number\n  /** Number of frames according to media header (media/stts atom) data */\n  readonly Source_FrameCount?: number\n  /** Either the NTSC or PAL color encoding system, as stored in the content */\n  readonly Standard?: string\n  /** Color profile of the image (e.g. YUV) */\n  readonly ColorSpace?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling?: string\n  /** Ratio of chroma to luma in encoded image (e.g. 4:2:2) */\n  readonly ChromaSubsampling_String?: string\n  /** Position type of chroma subsampling */\n  readonly ChromaSubsampling_Position?: string\n  /** Color information stored in the video frames, as integer (e.g. 10) */\n  readonly BitDepth?: number\n  /** Color information stored in the video frames, as string (e.g. 10 bits) */\n  readonly BitDepth_String?: string\n  /** Way in which lines of video are displayed (e.g. Progressive) */\n  readonly ScanType?: string\n  /** Way in which lines of video are displayed (e.g. Progressive) */\n  readonly ScanType_String?: string\n  /** Way in which lines of video are encoded (e.g. Progressive) */\n  readonly ScanType_Original?: string\n  /** Way in which lines of video are encoded (e.g. Progressive) */\n  readonly ScanType_Original_String?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanType_StoreMethod?: string\n  /** Count of fields per container block */\n  readonly ScanType_StoreMethod_FieldsPerBlock?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanType_StoreMethod_String?: string\n  /** Order in which lines are encoded, as acronym (e.g. TFF) */\n  readonly ScanOrder?: string\n  /** Order in which lines are encoded, as acronym (e.g. TFF) */\n  readonly ScanOrder_String?: string\n  /** Stored ScanOrder, displayed when the stored order is not same as the display order */\n  readonly ScanOrder_Stored?: string\n  /** Stored ScanOrder, displayed when the stored order is not same as the display order */\n  readonly ScanOrder_Stored_String?: string\n  /** Field is set to Yes when display and stored orders are inverted */\n  readonly ScanOrder_StoredDisplayedInverted?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanOrder_Original?: string\n  /** Whether the video's ScanType is stored with fields separated or interleaved */\n  readonly ScanOrder_Original_String?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode?: string\n  /** Compression mode (Lossy, Lossless) */\n  readonly Compression_Mode_String?: string\n  /** Stream size divided by uncompressed stream size */\n  readonly Compression_Ratio?: number\n  /** Bits divided by Pixel multiplied by Frame */\n  readonly 'Bits-Pixel_Frame'?: number\n  /** Delay fixed in the stream (relative), in ms */\n  readonly Delay?: number\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String1?: string\n  /** Delay fixed in the stream (relative), with measurement */\n  readonly Delay_String2?: string\n  /** Delay fixed in the stream (relative) in format HH:MM:SS.mmm, with measurement */\n  readonly Delay_String3?: string\n  /** Delay in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_String4?: string\n  /** Delay in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_DropFrame?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source?: string\n  /** Source location of the Delay (e.g. Container, Stream, empty) */\n  readonly Delay_Source_String?: string\n  /** Delay, in ms */\n  readonly Delay_Original?: number\n  /** Delay, with measurement */\n  readonly Delay_Original_String?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String1?: string\n  /** Delay, with measurement */\n  readonly Delay_Original_String2?: string\n  /** Delay, in format HH:MM:SS.mmm */\n  readonly Delay_Original_String3?: string\n  /** Delay, in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly Delay_Original_String4?: string\n  /** Delay, in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly Delay_Original_String5?: string\n  /** Delay settings (e.g. in case of timecode) */\n  readonly Delay_Original_Settings?: string\n  /** Delay drop frame information */\n  readonly Delay_Original_DropFrame?: string\n  /** Delay source (e.g. Container, Stream, empty) */\n  readonly Delay_Original_Source?: string\n  /** Timestamp fixed in the stream (relative), in ms */\n  readonly TimeStamp_FirstFrame?: number\n  /** Timestamp fixed in the stream (relative), with measurement */\n  readonly TimeStamp_FirstFrame_String?: string\n  /** Timestamp fixed in the stream (relative), with measurement */\n  readonly TimeStamp_FirstFrame_String1?: string\n  /** Timestamp fixed in the stream (relative), with measurement */\n  readonly TimeStamp_FirstFrame_String2?: string\n  /** Timestamp in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly TimeStamp_FirstFrame_String3?: string\n  /** Timestamp in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeStamp_FirstFrame_String4?: string\n  /** Timestamp in format HH:MM:SS.mmm (HH:MM:SS:FF) */\n  readonly TimeStamp_FirstFrame_String5?: string\n  /** Time code for first frame in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_FirstFrame?: string\n  /** Time code for last frame (excluding the duration of the last frame) in format HH:MM:SS:FF, with last colon replaced by semicolon for drop frame if available */\n  readonly TimeCode_LastFrame?: string\n  /** Time code drop frame */\n  readonly TimeCode_DropFrame?: string\n  /** Additional time code settings */\n  readonly TimeCode_Settings?: string\n  /** Time code source (Container, Stream, SystemScheme1, SDTI, ANC, etc.) */\n  readonly TimeCode_Source?: string\n  /** Time code information about Open/Closed GOP */\n  readonly Gop_OpenClosed?: string\n  /** Time code information about Open/Closed GOP */\n  readonly Gop_OpenClosed_String?: string\n  /** Time code information about Open/Closed of first frame if GOP is Open for the other GOPs */\n  readonly Gop_OpenClosed_FirstFrame?: string\n  /** Time code information about Open/Closed of first frame if GOP is Open for the other GOPs */\n  readonly Gop_OpenClosed_FirstFrame_String?: string\n  /** Size of this stream, in bytes */\n  readonly StreamSize?: number\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_String1?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_String2?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_String3?: string\n  /** Size of this stream, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_String4?: string\n  /** Size of this stream, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly StreamSize_Proportion?: string\n  /** Size of this stream after demuxing, in bytes */\n  readonly StreamSize_Demuxed?: number\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String1?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Demuxed_String2?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Demuxed_String3?: string\n  /** Size of this stream after demuxing, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Demuxed_String4?: string\n  /** Size of this stream after demuxing, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Demuxed_String5?: string\n  /** Size of content stored in the file, in bytes */\n  readonly Source_StreamSize?: number\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_String1?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_String2?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_String3?: string\n  /** Size of content stored in the file, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_String4?: string\n  /** Size of content stored in the file, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_String5?: string\n  /** Size of this stream divided by total file size */\n  readonly Source_StreamSize_Proportion?: string\n  /** Size of this stream when encoded, in bytes */\n  readonly StreamSize_Encoded?: number\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String1?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly StreamSize_Encoded_String2?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly StreamSize_Encoded_String3?: string\n  /** Size of this stream when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly StreamSize_Encoded_String4?: string\n  /** Size of this stream when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly StreamSize_Encoded_String5?: string\n  /** Encoded Stream size divided by file size */\n  readonly StreamSize_Encoded_Proportion?: string\n  /** Size of content stored in the file when encoded, in bytes */\n  readonly Source_StreamSize_Encoded?: number\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) rounded to the nearest integer (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String1?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the two most significant digits (e.g. 11 MiB) */\n  readonly Source_StreamSize_Encoded_String2?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the three most significant digits (e.g. 10.5 MiB) */\n  readonly Source_StreamSize_Encoded_String3?: string\n  /** Size of content stored in the file when encoded, measurement (measured in powers of 1024) rounded to the four most significant digits (e.g. 10.50 MiB) */\n  readonly Source_StreamSize_Encoded_String4?: string\n  /** Size of content stored in the file when encoded, with measurement (measured in powers of 1024) and percentage value (e.g. 10.5 MiB (98%)) */\n  readonly Source_StreamSize_Encoded_String5?: string\n  /** Source Encoded Stream size divided by file size */\n  readonly Source_StreamSize_Encoded_Proportion?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment?: string\n  /** How this stream is aligned in the container (e.g. Aligned, Split) */\n  readonly Alignment_String?: string\n  /** Title of track */\n  readonly Title?: string\n  /** Name of the software package used to create the file (e.g. Microsoft WaveEdiTY) @group Technical */\n  readonly Encoded_Application?: string\n  /** Name of the software package used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Application_String?: string\n  /** Name of the company of the encoding application @group Technical */\n  readonly Encoded_Application_CompanyName?: string\n  /** Name of the encoding product @group Technical */\n  readonly Encoded_Application_Name?: string\n  /** Version of the encoding product @group Technical */\n  readonly Encoded_Application_Version?: string\n  /** URL associated with the encoding software @group Technical */\n  readonly Encoded_Application_Url?: string\n  /** Software used to create the file @group Technical */\n  readonly Encoded_Library?: string\n  /** Software used to create the file, in the format \"CompanyName ProductName (OperatingSystem) Version (Date)\" @group Technical */\n  readonly Encoded_Library_String?: string\n  /** Name of the encoding software company @group Technical */\n  readonly Encoded_Library_CompanyName?: string\n  /** Name of the encoding software @group Technical */\n  readonly Encoded_Library_Name?: string\n  /** Version of the encoding software @group Technical */\n  readonly Encoded_Library_Version?: string\n  /** Release date of the encoding software, in UTC @group Technical */\n  readonly Encoded_Library_Date?: string\n  /** Parameters used by the encoding software @group Technical */\n  readonly Encoded_Library_Settings?: string\n  /** Operating System of the encoding software @group Technical */\n  readonly Encoded_OperatingSystem?: string\n  /** Language, formatted as 2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available (e.g. en, en-US, en-CN) */\n  readonly Language?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String?: string\n  /** Language, as full name (e.g. English) */\n  readonly Language_String1?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists (e.g. en) */\n  readonly Language_String2?: string\n  /** Language, formatted as 3-letter ISO 639-2, if exists (e.g. eng) */\n  readonly Language_String3?: string\n  /** Language, formatted as 2-letter ISO 639-1, if exists, with optional ISO 3166-1 country separated by a dash if available (e.g. en-US) */\n  readonly Language_String4?: string\n  /** More information about Language (e.g. Director's Comment) */\n  readonly Language_More?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind?: string\n  /** Type of assisted service (e.g. visually impaired, commentary, voice over) */\n  readonly ServiceKind_String?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled?: string\n  /** Set if this stream should not be used (Yes, No) */\n  readonly Disabled_String?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default?: string\n  /** Flag set if this stream should be used if no language found matches the user preference (Yes, No) */\n  readonly Default_String?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced?: string\n  /** Flag set if this stream should be used regardless of user preferences, often used for sparse subtitle dialogue in an otherwise unsubtitled movie (Yes, No) */\n  readonly Forced_String?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup?: string\n  /** Number of a group in order to provide versions of the same track */\n  readonly AlternateGroup_String?: string\n  /** Time that the encoding of this item was completed, in UTC @group Temporal */\n  readonly Encoded_Date?: string\n  /** Time that the tags were added to this item, in UTC @group Temporal */\n  readonly Tagged_Date?: string\n  /** Whether this stream is encrypted and, if available, how it is encrypted */\n  readonly Encryption?: string\n  /** The minimum size of the buffer needed to decode the sequence */\n  readonly BufferSize?: string\n  /** Presence of color description (Yes, No) */\n  readonly colour_description_present?: string\n  /** Presence of colour description (source) */\n  readonly colour_description_present_Source?: string\n  /** Presence of colour description (if incoherencies) */\n  readonly colour_description_present_Original?: string\n  /** Presence of colour description (source if incoherencies) */\n  readonly colour_description_present_Original_Source?: string\n  /** Color range for YUV color space */\n  readonly colour_range?: string\n  /** Colour range for YUV colour space (source) */\n  readonly colour_range_Source?: string\n  /** Colour range for YUV colour space (if incoherencies) */\n  readonly colour_range_Original?: string\n  /** Colour range for YUV colour space (source if incoherencies) */\n  readonly colour_range_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries */\n  readonly colour_primaries?: string\n  /** Chromaticity coordinates of the source primaries (source) */\n  readonly colour_primaries_Source?: string\n  /** Chromaticity coordinates of the source primaries (if incoherencies) */\n  readonly colour_primaries_Original?: string\n  /** Chromaticity coordinates of the source primaries (source if incoherencies) */\n  readonly colour_primaries_Original_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture */\n  readonly transfer_characteristics?: string\n  /** Opto-electronic transfer characteristic of the source picture (source) */\n  readonly transfer_characteristics_Source?: string\n  /** Opto-electronic transfer characteristic of the source picture (if incoherencies) */\n  readonly transfer_characteristics_Original?: string\n  /** Opto-electronic transfer characteristic of the source picture (source if incoherencies) */\n  readonly transfer_characteristics_Original_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries */\n  readonly matrix_coefficients?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source) */\n  readonly matrix_coefficients_Source?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (if incoherencies) */\n  readonly matrix_coefficients_Original?: string\n  /** Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries (source if incoherencies) */\n  readonly matrix_coefficients_Original_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display */\n  readonly MasteringDisplay_ColorPrimaries?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source) */\n  readonly MasteringDisplay_ColorPrimaries_Source?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original?: string\n  /** Chromaticity coordinates of the source primaries of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_ColorPrimaries_Original_Source?: string\n  /** Luminance of the mastering display */\n  readonly MasteringDisplay_Luminance?: string\n  /** Luminance of the mastering display (source) */\n  readonly MasteringDisplay_Luminance_Source?: string\n  /** Luminance of the mastering display (if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original?: string\n  /** Luminance of the mastering display (source if incoherencies) */\n  readonly MasteringDisplay_Luminance_Original_Source?: string\n  /** Maximum content light level */\n  readonly MaxCLL?: string\n  /** Maximum content light level (source) */\n  readonly MaxCLL_Source?: string\n  /** Maximum content light level (if incoherencies) */\n  readonly MaxCLL_Original?: string\n  /** Maximum content light level (source if incoherencies) */\n  readonly MaxCLL_Original_Source?: string\n  /** Maximum frame average light level */\n  readonly MaxFALL?: string\n  /** Maximum frame average light level (source) */\n  readonly MaxFALL_Source?: string\n  /** Maximum frame average light level (if incoherencies) */\n  readonly MaxFALL_Original?: string\n  /** Maximum frame average light level (source if incoherencies) */\n  readonly MaxFALL_Original_Source?: string\n}\n\nexport type Track =\n  | GeneralTrack\n  | VideoTrack\n  | AudioTrack\n  | TextTrack\n  | ImageTrack\n  | MenuTrack\n  | OtherTrack\n\nexport interface Media {\n  readonly '@ref': string\n  readonly track: Track[]\n}\n\nexport interface MediaInfoResult {\n  readonly creatingApplication?: CreationInfo\n  readonly creatingLibrary?: CreationInfo\n  readonly media?: Media\n}\n","import { unknownToError } from './error.js'\nimport { FLOAT_FIELDS, INT_FIELDS, type MediaInfoResult, type Track } from './MediaInfoResult.js'\nimport type { MediaInfoFactoryOptions } from './mediaInfoFactory.js'\nimport type { MediaInfoModule, MediaInfoWasmInterface } from './MediaInfoModule.js'\n\nconst MAX_UINT32_PLUS_ONE = 2 ** 32\n\n/** Format of the result type */\ntype FormatType = 'object' | 'JSON' | 'XML' | 'HTML' | 'text'\n\ntype MediaInfoOptions<TFormat extends FormatType> = Required<\n  Omit<MediaInfoFactoryOptions<TFormat>, 'locateFile'>\n>\n\ntype SizeArg = (() => Promise<number> | number) | number\n\ntype ReadChunkFunc = (size: number, offset: number) => Promise<Uint8Array> | Uint8Array\n\ninterface ResultMap {\n  object: MediaInfoResult\n  JSON: string\n  XML: string\n  HTML: string\n  text: string\n}\n\nconst FORMAT_CHOICES = ['JSON', 'XML', 'HTML', 'text'] as const\n\nconst DEFAULT_OPTIONS = {\n  coverData: false,\n  chunkSize: 256 * 1024,\n  format: 'object',\n  full: false,\n} as const\n\ntype ResultCallback<TFormat extends FormatType> = (\n  result: ResultMap[TFormat] | null,\n  err?: unknown\n) => void\n\n/**\n * Wrapper for the MediaInfoLib WASM module.\n *\n * This class should not be instantiated directly. Use the {@link mediaInfoFactory} function\n * to create instances of `MediaInfo`.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n */\nclass MediaInfo<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format> {\n  private readonly mediainfoModule: MediaInfoModule\n  private readonly mediainfoModuleInstance: MediaInfoWasmInterface\n\n  /** @group General Use */\n  readonly options: MediaInfoOptions<TFormat>\n\n  /**\n   * The constructor should not be called directly, instead use {@link mediaInfoFactory}.\n   *\n   * @hidden\n   * @param mediainfoModule WASM module\n   * @param options User options\n   */\n  constructor(mediainfoModule: MediaInfoModule, options: MediaInfoOptions<TFormat>) {\n    this.mediainfoModule = mediainfoModule\n    this.options = options\n\n    // Instantiate\n    this.mediainfoModuleInstance = new mediainfoModule.MediaInfo(\n      options.format === 'object' ? 'JSON' : options.format,\n      options.coverData,\n      options.full\n    )\n  }\n\n  /**\n   * Convenience method for analyzing a buffer chunk by chunk.\n   *\n   * @param size Return total buffer size in bytes.\n   * @param readChunk Read chunk of data and return an {@link Uint8Array}.\n   * @group General Use\n   */\n  analyzeData(size: SizeArg, readChunk: ReadChunkFunc): Promise<ResultMap[TFormat]>\n\n  /**\n   * Convenience method for analyzing a buffer chunk by chunk.\n   *\n   * @param size Return total buffer size in bytes.\n   * @param readChunk Read chunk of data and return an {@link Uint8Array}.\n   * @param callback Function that is called once the processing is done\n   * @group General Use\n   */\n  analyzeData(size: SizeArg, readChunk: ReadChunkFunc, callback: ResultCallback<TFormat>): void\n\n  analyzeData(\n    size: SizeArg,\n    readChunk: ReadChunkFunc,\n    callback?: ResultCallback<TFormat>\n  ): Promise<ResultMap[TFormat] | null> | undefined {\n    // Support promise signature\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        const resultCb: ResultCallback<TFormat> = (result, error) => {\n          if (error || !result) {\n            reject(unknownToError(error))\n          } else {\n            resolve(result)\n          }\n        }\n        this.analyzeData(size, readChunk, resultCb)\n      })\n    }\n\n    const finalize = () => {\n      this.openBufferFinalize()\n      const result = this.inform()\n      if (this.options.format === 'object') {\n        callback(this.parseResultJson(result))\n      } else {\n        callback(result)\n      }\n    }\n\n    let offset = 0\n    const runReadDataLoop = (fileSize: number) => {\n      const readNextChunk = (data: Uint8Array) => {\n        if (continueBuffer(data)) {\n          getChunk()\n        } else {\n          finalize()\n        }\n      }\n\n      const getChunk = () => {\n        let dataValue\n        try {\n          const safeSize = Math.min(this.options.chunkSize, fileSize - offset)\n          dataValue = readChunk(safeSize, offset)\n        } catch (error: unknown) {\n          callback('', unknownToError(error))\n          return\n        }\n\n        if (dataValue instanceof Promise) {\n          dataValue.then(readNextChunk).catch((error: unknown) => {\n            callback('', unknownToError(error))\n          })\n        } else {\n          readNextChunk(dataValue)\n        }\n      }\n\n      const continueBuffer = (data: Uint8Array): boolean => {\n        if (data.length === 0 || this.openBufferContinue(data, data.length)) {\n          return false\n        }\n        const seekTo: number = this.openBufferContinueGotoGet()\n        if (seekTo === -1) {\n          offset += data.length\n        } else {\n          offset = seekTo\n          this.openBufferInit(fileSize, seekTo)\n        }\n        return true\n      }\n\n      this.openBufferInit(fileSize, offset)\n      getChunk()\n    }\n\n    const fileSizeValue = typeof size === 'function' ? size() : size\n\n    if (fileSizeValue instanceof Promise) {\n      fileSizeValue.then(runReadDataLoop).catch((error: unknown) => {\n        callback(null, unknownToError(error))\n      })\n    } else {\n      runReadDataLoop(fileSizeValue)\n    }\n  }\n\n  /**\n   * Close the MediaInfoLib WASM instance.\n   *\n   * @group General Use\n   */\n  close(): void {\n    if (typeof this.mediainfoModuleInstance.close === 'function') {\n      this.mediainfoModuleInstance.close()\n    }\n    if (typeof this.mediainfoModule.destroy === 'function') {\n      this.mediainfoModule.destroy(this.mediainfoModuleInstance)\n    }\n  }\n\n  /**\n   * Receive result data from the WASM instance.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @returns Result data (format can be configured in options)\n   * @group Low-level\n   */\n  inform(): string {\n    return this.mediainfoModuleInstance.inform()\n  }\n\n  /**\n   * Send more data to the WASM instance.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @param data Data buffer\n   * @param size Buffer size\n   * @returns Processing state: `0` (no bits set) = not finished, Bit `0` set = enough data read for providing information\n   * @group Low-level\n   */\n  openBufferContinue(data: Uint8Array, size: number): boolean {\n    // bit 3 set -> done\n    return !!(this.mediainfoModuleInstance.open_buffer_continue(data, size) & 0x08)\n  }\n\n  /**\n   * Retrieve seek position from WASM instance.\n   * The MediaInfoLib function `Open_Buffer_GoTo` returns an integer with 64 bit precision.\n   * It would be cut at 32 bit due to the JavaScript bindings. Here we transport the low and high\n   * parts separately and put them together.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @returns Seek position (where MediaInfoLib wants go in the data buffer)\n   * @group Low-level\n   */\n  openBufferContinueGotoGet(): number {\n    // JS bindings don't support 64 bit int\n    // https://github.com/buzz/mediainfo.js/issues/11\n    let seekTo = -1\n    const seekToLow: number = this.mediainfoModuleInstance.open_buffer_continue_goto_get_lower()\n    const seekToHigh: number = this.mediainfoModuleInstance.open_buffer_continue_goto_get_upper()\n    if (seekToLow == -1 && seekToHigh == -1) {\n      seekTo = -1\n    } else if (seekToLow < 0) {\n      seekTo = seekToLow + MAX_UINT32_PLUS_ONE + seekToHigh * MAX_UINT32_PLUS_ONE\n    } else {\n      seekTo = seekToLow + seekToHigh * MAX_UINT32_PLUS_ONE\n    }\n    return seekTo\n  }\n\n  /**\n   * Inform MediaInfoLib that no more data is being read.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @group Low-level\n   */\n  openBufferFinalize(): void {\n    this.mediainfoModuleInstance.open_buffer_finalize()\n  }\n\n  /**\n   * Prepare MediaInfoLib to process a data buffer.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @param size Expected buffer size\n   * @param offset Buffer offset\n   * @group Low-level\n   */\n  openBufferInit(size: number, offset: number): void {\n    this.mediainfoModuleInstance.open_buffer_init(size, offset)\n  }\n\n  /**\n   * Parse result JSON. Convert integer/float fields.\n   *\n   * @param result Serialized JSON from MediaInfo\n   * @returns Parsed JSON object\n   */\n  private parseResultJson(resultString: string): ResultMap[TFormat] {\n    type Writable<T> = { -readonly [P in keyof T]: T[P] }\n\n    const intFields = INT_FIELDS as readonly string[]\n    const floatFields = FLOAT_FIELDS as readonly string[]\n\n    // Parse JSON\n    const result = JSON.parse(resultString) as MediaInfoResult\n\n    if (result.media) {\n      const newMedia = { ...result.media, track: [] as Writable<Track>[] }\n\n      if (Array.isArray(result.media.track)) {\n        for (const track of result.media.track) {\n          let newTrack: Writable<Track> = { '@type': track['@type'] }\n          for (const [key, val] of Object.entries(track) as [string, unknown][]) {\n            if (key === '@type') {\n              continue\n            }\n            if (typeof val === 'string' && intFields.includes(key)) {\n              newTrack = { ...newTrack, [key]: Number.parseInt(val, 10) }\n            } else if (typeof val === 'string' && floatFields.includes(key)) {\n              newTrack = { ...newTrack, [key]: Number.parseFloat(val) }\n            } else {\n              newTrack = { ...newTrack, [key]: val }\n            }\n          }\n          newMedia.track.push(newTrack)\n        }\n      }\n\n      return { ...result, media: newMedia } as ResultMap[TFormat]\n    }\n\n    return result as ResultMap[TFormat]\n  }\n}\n\nexport type { FormatType, ReadChunkFunc, ResultMap, SizeArg }\nexport { DEFAULT_OPTIONS, FORMAT_CHOICES }\nexport default MediaInfo\n","import MediaInfo, { DEFAULT_OPTIONS, type FormatType } from './MediaInfo.js'\nimport mediaInfoModuleFactory, { type MediaInfoModule } from './MediaInfoModule.js'\n\ninterface MediaInfoFactoryOptions<TFormat extends FormatType> {\n  /** Output cover data as base64 */\n  coverData?: boolean\n\n  /** Chunk size used by `analyzeData` (in bytes) */\n  chunkSize?: number\n\n  /** Result format (`object`, `JSON`, `XML`, `HTML` or `text`) */\n  format?: TFormat\n\n  /** Full information display (all internal tags) */\n  full?: boolean\n\n  /**\n   * This method will be called before loading the WASM file. It should return the actual URL to\n   * `MediaInfoModule.wasm`.\n   *\n   * @see https://emscripten.org/docs/api_reference/module.html#Module.locateFile\n   */\n  locateFile?: (path: string, prefix: string) => string\n}\n\nconst noopPrint = () => {\n  // No-op\n}\n\ntype FactoryCallback<TFormat extends FormatType> = (mediainfo: MediaInfo<TFormat>) => void\ntype ErrorCallback = (error: unknown) => void\n\nfunction defaultLocateFile(path: string, prefix: string) {\n  try {\n    const url = new URL(prefix)\n    if (url.pathname === '/') {\n      return `${prefix}mediainfo.js/dist/${path}`\n    }\n  } catch {\n    // empty\n  }\n  return `${prefix}../${path}`\n}\n\n// TODO pass through more emscripten module options?\n\n/**\n * Creates a {@link MediaInfo} instance with the specified options.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n * @param options - Configuration options for creating the {@link MediaInfo} instance.\n * @returns A promise that resolves to a {@link MediaInfo} instance when no callback is provided.\n */\nfunction mediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options?: MediaInfoFactoryOptions<TFormat>\n): Promise<MediaInfo<TFormat>>\n\n/**\n * Creates a {@link MediaInfo} instance with the specified options and executes the callback.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n * @param options - Configuration options for creating the {@link MediaInfo} instance.\n * @param callback - Function to call with the {@link MediaInfo} instance.\n * @param errCallback - Optional function to call on error.\n */\nfunction mediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat>,\n  callback: FactoryCallback<TFormat>,\n  errCallback?: ErrorCallback\n): void\n\nfunction mediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat> = {},\n  callback?: FactoryCallback<TFormat>,\n  errCallback?: ErrorCallback\n): Promise<MediaInfo<TFormat>> | undefined {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      mediaInfoFactory(options, resolve, reject)\n    })\n  }\n\n  const { locateFile, ...mergedOptions } = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    format: (options.format ?? DEFAULT_OPTIONS.format) as TFormat,\n  }\n\n  const mediaInfoModuleFactoryOpts: Partial<MediaInfoModule> = {\n    // Silence all print in module\n    print: noopPrint,\n    printErr: noopPrint,\n\n    locateFile: locateFile ?? defaultLocateFile,\n    onAbort: (err: Error) => {\n      if (errCallback) {\n        errCallback(err)\n      }\n    },\n  }\n\n  // Fetch and load WASM module\n  mediaInfoModuleFactory(mediaInfoModuleFactoryOpts)\n    .then((wasmModule) => {\n      callback(new MediaInfo<TFormat>(wasmModule, mergedOptions))\n    })\n    .catch((error: unknown) => {\n      if (errCallback) {\n        errCallback(error)\n      }\n    })\n}\n\nexport type { MediaInfoFactoryOptions }\nexport default mediaInfoFactory\n","import type { Track } from './MediaInfoResult'\n\n/**\n * Checks if a given object is of a specified track type.\n *\n * @template T - The type of track to check for.\n * @param thing - The object to check.\n * @param type - The track type to check against.\n * @returns A boolean indicating whether the object is of the specified track type.\n */\nfunction isTrackType<T extends Track['@type']>(\n  thing: unknown,\n  type: T\n): thing is Extract<Track, { '@type': T }> {\n  return thing !== null && typeof thing === 'object' && (thing as Track)['@type'] === type\n}\n\nexport { isTrackType }\n"],"names":["unknownToError","error","Object","prototype","hasOwnProperty","call","isError","Error","INT_FIELDS","FLOAT_FIELDS","MAX_UINT32_PLUS_ONE","DEFAULT_OPTIONS","coverData","chunkSize","format","full","MediaInfo","constructor","mediainfoModule","options","this","mediainfoModuleInstance","analyzeData","size","readChunk","callback","undefined","Promise","resolve","reject","resultCb","result","finalize","openBufferFinalize","inform","parseResultJson","offset","runReadDataLoop","fileSize","readNextChunk","data","continueBuffer","getChunk","dataValue","safeSize","Math","min","then","catch","length","openBufferContinue","seekTo","openBufferContinueGotoGet","openBufferInit","fileSizeValue","close","destroy","open_buffer_continue","seekToLow","open_buffer_continue_goto_get_lower","seekToHigh","open_buffer_continue_goto_get_upper","open_buffer_finalize","open_buffer_init","resultString","intFields","floatFields","JSON","parse","media","newMedia","track","Array","isArray","newTrack","key","val","entries","includes","Number","parseInt","parseFloat","push","noopPrint","defaultLocateFile","path","prefix","URL","pathname","mediaInfoFactory","arguments","errCallback","locateFile","mergedOptions","mediaInfoModuleFactory","print","printErr","onAbort","err","wasmModule","isTrackType","thing","type"],"mappings":"AAQA,SAASA,EAAeC,GACtB,OATF,SAAiBA,GACf,OACY,OAAVA,GACiB,iBAAVA,GACPC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAO,UAEhD,CAGMK,CAAQL,GACHA,EAEF,IAAIM,MAAuB,iBAAVN,EAAqBA,EAAQ,gBACvD,CCXO,MAAMO,EAAa,CACxB,gBACA,eACA,aACA,uBACA,oBACA,WACA,kBACA,WACA,oBACA,qBACA,mBACA,uBACA,QACA,WACA,eACA,sBACA,oBACA,mBACA,aACA,sBACA,4BACA,6BACA,aACA,gBACA,gBACA,eACA,aACA,uBACA,SACA,gBACA,kBACA,aACA,0BACA,yBACA,kBACA,YACA,aACA,gBACA,sBACA,eACA,gBACA,sBACA,aACA,iBACA,gBACA,gBACA,kBACA,wBACA,oBACA,uBACA,4BACA,oBACA,SACA,gBACA,eACA,cACA,eACA,gBACA,qBACA,qBACA,aACA,YACA,iBACA,uBACA,eACA,aACA,sBACA,QACA,eACA,kBAGWC,EAAe,CAC1B,4BACA,kBACA,kBACA,kBACA,UACA,kBACA,mBACA,kBACA,oBACA,QACA,iBACA,mCACA,qBACA,8BACA,uBACA,eACA,sBACA,qBACA,WACA,qBACA,yBACA,iBACA,qBACA,oBACA,oBACA,YACA,oBACA,yBACA,qBACA,yBACA,iBACA,sBACA,qBACA,yBACA,yBACA,yBACA,iBACA,yBACA,iCACA,mBACA,4BACA,kBACA,eACA,6BACA,4BACA,kBACA,uBACA,eCtHIC,EAAsB,GAAK,GAuB3BC,EAAkB,CACtBC,WAAW,EACXC,UAAW,OACXC,OAAQ,SACRC,MAAM,GAgBR,MAAMC,EAcJC,WAAAA,CAAYC,EAAkCC,GAC5CC,KAAKF,gBAAkBA,EACvBE,KAAKD,QAAUA,EAGfC,KAAKC,wBAA0B,IAAIH,EAAgBF,UAC9B,WAAnBG,EAAQL,OAAsB,OAASK,EAAQL,OAC/CK,EAAQP,UACRO,EAAQJ,KAEZ,CAqBAO,WAAAA,CACEC,EACAC,EACAC,GAGA,QAAiBC,IAAbD,EACF,OAAO,IAAIE,QAAQ,CAACC,EAASC,KAQ3BT,KAAKE,YAAYC,EAAMC,EAPmBM,CAACC,EAAQ9B,KAC7CA,IAAU8B,EACZF,EAAO7B,EAAeC,IAEtB2B,EAAQG,OAOhB,MAAMC,EAAWA,KACfZ,KAAKa,qBACL,MAAMF,EAASX,KAAKc,SACQ,WAAxBd,KAAKD,QAAQL,OACfW,EAASL,KAAKe,gBAAgBJ,IAE9BN,EAASM,IAIb,IAAIK,EAAS,EACb,MAAMC,EAAmBC,IACvB,MAAMC,EAAiBC,IACjBC,EAAeD,GACjBE,IAEAV,KAIEU,EAAWA,KACf,IAAIC,EACJ,IACE,MAAMC,EAAWC,KAAKC,IAAI1B,KAAKD,QAAQN,UAAWyB,EAAWF,GAC7DO,EAAYnB,EAAUoB,EAAUR,EAClC,CAAE,MAAOnC,GAEP,YADAwB,EAAS,GAAIzB,EAAeC,GAE9B,CAEI0C,aAAqBhB,QACvBgB,EAAUI,KAAKR,GAAeS,MAAO/C,IACnCwB,EAAS,GAAIzB,EAAeC,MAG9BsC,EAAcI,IAIZF,EAAkBD,IACtB,GAAoB,IAAhBA,EAAKS,QAAgB7B,KAAK8B,mBAAmBV,EAAMA,EAAKS,QAC1D,OAAO,EAET,MAAME,EAAiB/B,KAAKgC,4BAO5B,OANe,IAAXD,EACFf,GAAUI,EAAKS,QAEfb,EAASe,EACT/B,KAAKiC,eAAef,EAAUa,KAEzB,GAGT/B,KAAKiC,eAAef,EAAUF,GAC9BM,KAGIY,EAAgC,mBAAT/B,EAAsBA,IAASA,EAExD+B,aAAyB3B,QAC3B2B,EAAcP,KAAKV,GAAiBW,MAAO/C,IACzCwB,EAAS,KAAMzB,EAAeC,MAGhCoC,EAAgBiB,EAEpB,CAOAC,KAAAA,GACoD,mBAAvCnC,KAAKC,wBAAwBkC,OACtCnC,KAAKC,wBAAwBkC,QAEa,mBAAjCnC,KAAKF,gBAAgBsC,SAC9BpC,KAAKF,gBAAgBsC,QAAQpC,KAAKC,wBAEtC,CAUAa,MAAAA,GACE,OAAOd,KAAKC,wBAAwBa,QACtC,CAYAgB,kBAAAA,CAAmBV,EAAkBjB,GAEnC,SAA0E,EAAhEH,KAAKC,wBAAwBoC,qBAAqBjB,EAAMjB,GACpE,CAaA6B,yBAAAA,GAGE,IAAID,GAAS,EACb,MAAMO,EAAoBtC,KAAKC,wBAAwBsC,sCACjDC,EAAqBxC,KAAKC,wBAAwBwC,sCAQxD,OANEV,GADe,GAAbO,OAAmBE,GACZ,EACAF,EAAY,EACZA,EAAYhD,EAAsBkD,EAAalD,EAE/CgD,EAAYE,EAAalD,EAE7ByC,CACT,CASAlB,kBAAAA,GACEb,KAAKC,wBAAwByC,sBAC/B,CAWAT,cAAAA,CAAe9B,EAAca,GAC3BhB,KAAKC,wBAAwB0C,iBAAiBxC,EAAMa,EACtD,CAQQD,eAAAA,CAAgB6B,GAGtB,MAAMC,EAAYzD,EACZ0D,EAAczD,EAGdsB,EAASoC,KAAKC,MAAMJ,GAE1B,GAAIjC,EAAOsC,MAAO,CAChB,MAAMC,EAAW,IAAKvC,EAAOsC,MAAOE,MAAO,IAE3C,GAAIC,MAAMC,QAAQ1C,EAAOsC,MAAME,OAC7B,IAAK,MAAMA,KAASxC,EAAOsC,MAAME,MAAO,CACtC,IAAIG,EAA4B,CAAE,QAASH,EAAM,UACjD,IAAK,MAAOI,EAAKC,KAAQ1E,OAAO2E,QAAQN,GAC1B,UAARI,IAIFD,EADiB,iBAARE,GAAoBX,EAAUa,SAASH,GACrC,IAAKD,EAAUC,CAACA,GAAMI,OAAOC,SAASJ,EAAK,KAC9B,iBAARA,GAAoBV,EAAYY,SAASH,GAC9C,IAAKD,EAAUC,CAACA,GAAMI,OAAOE,WAAWL,IAExC,IAAKF,EAAUC,CAACA,GAAMC,IAGrCN,EAASC,MAAMW,KAAKR,EACtB,CAGF,MAAO,IAAK3C,EAAQsC,MAAOC,EAC7B,CAEA,OAAOvC,CACT,m4pBChSF,MAAMoD,EAAYA,OAOlB,SAASC,EAAkBC,EAAcC,GACvC,IAEE,GAAqB,MADT,IAAIC,IAAID,GACZE,SACN,MAAO,GAAGF,sBAA2BD,GAEzC,CAAE,MACA,CAEF,MAAO,GAAGC,OAAYD,GACxB,CA6BA,SAASI,IAIkC,IAHzCtE,EAAyCuE,UAAAzC,OAAA,QAAAvB,IAAAgE,UAAA,GAAAA,UAAA,GAAG,CAAA,EAC5CjE,EAAmCiE,UAAAzC,OAAA,EAAAyC,kBAAAhE,EACnCiE,EAA2BD,UAAAzC,OAAA,EAAAyC,kBAAAhE,EAE3B,QAAiBA,IAAbD,EACF,OAAO,IAAIE,QAAQ,CAACC,EAASC,KAC3B4D,EAAiBtE,EAASS,EAASC,KAIvC,MAAM+D,WAAEA,KAAeC,GAAkB,IACpClF,KACAQ,EACHL,OAASK,EAAQL,QAAUH,EAAgBG,QAiB7CgF,EAd6D,CAE3DC,MAAOZ,EACPa,SAAUb,EAEVS,WAAYA,GAAcR,EAC1Ba,QAAUC,IACJP,GACFA,EAAYO,MAOfnD,KAAMoD,IACL1E,EAAS,IAAIT,EAAmBmF,EAAYN,MAE7C7C,MAAO/C,IACF0F,GACFA,EAAY1F,IAGpB,CCrGA,SAASmG,EACPC,EACAC,GAEA,OAAiB,OAAVD,GAAmC,iBAAVA,GAAuBA,EAAgB,WAAaC,CACtF"}