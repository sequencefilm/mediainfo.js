{"version":3,"file":"MediaInfo.cjs","names":["MAX_UINT32_PLUS_ONE","FORMAT_CHOICES","exports","DEFAULT_OPTIONS","coverData","chunkSize","format","full","MediaInfo","constructor","mediainfoModule","options","mediainfoModuleInstance","analyzeData","size","readChunk","callback","undefined","Promise","resolve","reject","resultCb","result","error","unknownToError","finalize","openBufferFinalize","inform","parseResultJson","offset","runReadDataLoop","fileSize","readNextChunk","data","continueBuffer","getChunk","dataValue","safeSize","Math","min","then","catch","length","openBufferContinue","seekTo","openBufferContinueGotoGet","openBufferInit","fileSizeValue","close","destroy","open_buffer_continue","seekToLow","open_buffer_continue_goto_get_lower","seekToHigh","open_buffer_continue_goto_get_upper","open_buffer_finalize","open_buffer_init","resultString","intFields","INT_FIELDS","floatFields","FLOAT_FIELDS","JSON","parse","media","newMedia","track","Array","isArray","newTrack","key","val","Object","entries","includes","Number","parseInt","parseFloat","push","_default","default"],"sourceRoot":"../../src","sources":["MediaInfo.ts"],"sourcesContent":["import { unknownToError } from './error.js'\nimport { FLOAT_FIELDS, INT_FIELDS, type MediaInfoResult, type Track } from './MediaInfoResult.js'\nimport type { MediaInfoFactoryOptions } from './mediaInfoFactory.js'\nimport type { MediaInfoModule, MediaInfoWasmInterface } from './MediaInfoModule.js'\n\nconst MAX_UINT32_PLUS_ONE = 2 ** 32\n\n/** Format of the result type */\ntype FormatType = 'object' | 'JSON' | 'XML' | 'HTML' | 'text'\n\ntype MediaInfoOptions<TFormat extends FormatType> = Required<\n  Omit<MediaInfoFactoryOptions<TFormat>, 'locateFile'>\n>\n\ntype SizeArg = (() => Promise<number> | number) | number\n\ntype ReadChunkFunc = (size: number, offset: number) => Promise<Uint8Array> | Uint8Array\n\ninterface ResultMap {\n  object: MediaInfoResult\n  JSON: string\n  XML: string\n  HTML: string\n  text: string\n}\n\nconst FORMAT_CHOICES = ['JSON', 'XML', 'HTML', 'text'] as const\n\nconst DEFAULT_OPTIONS = {\n  coverData: false,\n  chunkSize: 256 * 1024,\n  format: 'object',\n  full: false,\n} as const\n\ntype ResultCallback<TFormat extends FormatType> = (\n  result: ResultMap[TFormat] | null,\n  err?: unknown\n) => void\n\n/**\n * Wrapper for the MediaInfoLib WASM module.\n *\n * This class should not be instantiated directly. Use the {@link mediaInfoFactory} function\n * to create instances of `MediaInfo`.\n *\n * @typeParam TFormat - The format type, defaults to `object`.\n */\nclass MediaInfo<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format> {\n  private readonly mediainfoModule: MediaInfoModule\n  private readonly mediainfoModuleInstance: MediaInfoWasmInterface\n\n  /** @group General Use */\n  readonly options: MediaInfoOptions<TFormat>\n\n  /**\n   * The constructor should not be called directly, instead use {@link mediaInfoFactory}.\n   *\n   * @hidden\n   * @param mediainfoModule WASM module\n   * @param options User options\n   */\n  constructor(mediainfoModule: MediaInfoModule, options: MediaInfoOptions<TFormat>) {\n    this.mediainfoModule = mediainfoModule\n    this.options = options\n\n    // Instantiate\n    this.mediainfoModuleInstance = new mediainfoModule.MediaInfo(\n      options.format === 'object' ? 'JSON' : options.format,\n      options.coverData,\n      options.full\n    )\n  }\n\n  /**\n   * Convenience method for analyzing a buffer chunk by chunk.\n   *\n   * @param size Return total buffer size in bytes.\n   * @param readChunk Read chunk of data and return an {@link Uint8Array}.\n   * @group General Use\n   */\n  analyzeData(size: SizeArg, readChunk: ReadChunkFunc): Promise<ResultMap[TFormat]>\n\n  /**\n   * Convenience method for analyzing a buffer chunk by chunk.\n   *\n   * @param size Return total buffer size in bytes.\n   * @param readChunk Read chunk of data and return an {@link Uint8Array}.\n   * @param callback Function that is called once the processing is done\n   * @group General Use\n   */\n  analyzeData(size: SizeArg, readChunk: ReadChunkFunc, callback: ResultCallback<TFormat>): void\n\n  analyzeData(\n    size: SizeArg,\n    readChunk: ReadChunkFunc,\n    callback?: ResultCallback<TFormat>\n  ): Promise<ResultMap[TFormat] | null> | undefined {\n    // Support promise signature\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        const resultCb: ResultCallback<TFormat> = (result, error) => {\n          if (error || !result) {\n            reject(unknownToError(error))\n          } else {\n            resolve(result)\n          }\n        }\n        this.analyzeData(size, readChunk, resultCb)\n      })\n    }\n\n    const finalize = () => {\n      this.openBufferFinalize()\n      const result = this.inform()\n      if (this.options.format === 'object') {\n        callback(this.parseResultJson(result))\n      } else {\n        callback(result)\n      }\n    }\n\n    let offset = 0\n    const runReadDataLoop = (fileSize: number) => {\n      const readNextChunk = (data: Uint8Array) => {\n        if (continueBuffer(data)) {\n          getChunk()\n        } else {\n          finalize()\n        }\n      }\n\n      const getChunk = () => {\n        let dataValue\n        try {\n          const safeSize = Math.min(this.options.chunkSize, fileSize - offset)\n          dataValue = readChunk(safeSize, offset)\n        } catch (error: unknown) {\n          callback('', unknownToError(error))\n          return\n        }\n\n        if (dataValue instanceof Promise) {\n          dataValue.then(readNextChunk).catch((error: unknown) => {\n            callback('', unknownToError(error))\n          })\n        } else {\n          readNextChunk(dataValue)\n        }\n      }\n\n      const continueBuffer = (data: Uint8Array): boolean => {\n        if (data.length === 0 || this.openBufferContinue(data, data.length)) {\n          return false\n        }\n        const seekTo: number = this.openBufferContinueGotoGet()\n        if (seekTo === -1) {\n          offset += data.length\n        } else {\n          offset = seekTo\n          this.openBufferInit(fileSize, seekTo)\n        }\n        return true\n      }\n\n      this.openBufferInit(fileSize, offset)\n      getChunk()\n    }\n\n    const fileSizeValue = typeof size === 'function' ? size() : size\n\n    if (fileSizeValue instanceof Promise) {\n      fileSizeValue.then(runReadDataLoop).catch((error: unknown) => {\n        callback(null, unknownToError(error))\n      })\n    } else {\n      runReadDataLoop(fileSizeValue)\n    }\n  }\n\n  /**\n   * Close the MediaInfoLib WASM instance.\n   *\n   * @group General Use\n   */\n  close(): void {\n    if (typeof this.mediainfoModuleInstance.close === 'function') {\n      this.mediainfoModuleInstance.close()\n    }\n    if (typeof this.mediainfoModule.destroy === 'function') {\n      this.mediainfoModule.destroy(this.mediainfoModuleInstance)\n    }\n  }\n\n  /**\n   * Receive result data from the WASM instance.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @returns Result data (format can be configured in options)\n   * @group Low-level\n   */\n  inform(): string {\n    return this.mediainfoModuleInstance.inform()\n  }\n\n  /**\n   * Send more data to the WASM instance.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @param data Data buffer\n   * @param size Buffer size\n   * @returns Processing state: `0` (no bits set) = not finished, Bit `0` set = enough data read for providing information\n   * @group Low-level\n   */\n  openBufferContinue(data: Uint8Array, size: number): boolean {\n    // bit 3 set -> done\n    return !!(this.mediainfoModuleInstance.open_buffer_continue(data, size) & 0x08)\n  }\n\n  /**\n   * Retrieve seek position from WASM instance.\n   * The MediaInfoLib function `Open_Buffer_GoTo` returns an integer with 64 bit precision.\n   * It would be cut at 32 bit due to the JavaScript bindings. Here we transport the low and high\n   * parts separately and put them together.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @returns Seek position (where MediaInfoLib wants go in the data buffer)\n   * @group Low-level\n   */\n  openBufferContinueGotoGet(): number {\n    // JS bindings don't support 64 bit int\n    // https://github.com/buzz/mediainfo.js/issues/11\n    let seekTo = -1\n    const seekToLow: number = this.mediainfoModuleInstance.open_buffer_continue_goto_get_lower()\n    const seekToHigh: number = this.mediainfoModuleInstance.open_buffer_continue_goto_get_upper()\n    if (seekToLow == -1 && seekToHigh == -1) {\n      seekTo = -1\n    } else if (seekToLow < 0) {\n      seekTo = seekToLow + MAX_UINT32_PLUS_ONE + seekToHigh * MAX_UINT32_PLUS_ONE\n    } else {\n      seekTo = seekToLow + seekToHigh * MAX_UINT32_PLUS_ONE\n    }\n    return seekTo\n  }\n\n  /**\n   * Inform MediaInfoLib that no more data is being read.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @group Low-level\n   */\n  openBufferFinalize(): void {\n    this.mediainfoModuleInstance.open_buffer_finalize()\n  }\n\n  /**\n   * Prepare MediaInfoLib to process a data buffer.\n   *\n   * (This is a low-level MediaInfoLib function.)\n   *\n   * @param size Expected buffer size\n   * @param offset Buffer offset\n   * @group Low-level\n   */\n  openBufferInit(size: number, offset: number): void {\n    this.mediainfoModuleInstance.open_buffer_init(size, offset)\n  }\n\n  /**\n   * Parse result JSON. Convert integer/float fields.\n   *\n   * @param result Serialized JSON from MediaInfo\n   * @returns Parsed JSON object\n   */\n  private parseResultJson(resultString: string): ResultMap[TFormat] {\n    type Writable<T> = { -readonly [P in keyof T]: T[P] }\n\n    const intFields = INT_FIELDS as readonly string[]\n    const floatFields = FLOAT_FIELDS as readonly string[]\n\n    // Parse JSON\n    const result = JSON.parse(resultString) as MediaInfoResult\n\n    if (result.media) {\n      const newMedia = { ...result.media, track: [] as Writable<Track>[] }\n\n      if (Array.isArray(result.media.track)) {\n        for (const track of result.media.track) {\n          let newTrack: Writable<Track> = { '@type': track['@type'] }\n          for (const [key, val] of Object.entries(track) as [string, unknown][]) {\n            if (key === '@type') {\n              continue\n            }\n            if (typeof val === 'string' && intFields.includes(key)) {\n              newTrack = { ...newTrack, [key]: Number.parseInt(val, 10) }\n            } else if (typeof val === 'string' && floatFields.includes(key)) {\n              newTrack = { ...newTrack, [key]: Number.parseFloat(val) }\n            } else {\n              newTrack = { ...newTrack, [key]: val }\n            }\n          }\n          newMedia.track.push(newTrack)\n        }\n      }\n\n      return { ...result, media: newMedia } as ResultMap[TFormat]\n    }\n\n    return result as ResultMap[TFormat]\n  }\n}\n\nexport type { FormatType, ReadChunkFunc, ResultMap, SizeArg }\nexport { DEFAULT_OPTIONS, FORMAT_CHOICES }\nexport default MediaInfo\n"],"mappings":"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","ignoreList":[]}